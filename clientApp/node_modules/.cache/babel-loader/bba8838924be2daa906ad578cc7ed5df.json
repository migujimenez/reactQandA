{"ast":null,"code":"var _jsxFileName = \"/Users/migueljimenez/Projects/QandA/frontend/src/SearchPage.tsx\",\n    _s = $RefreshSig$();\n\n/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Page } from './Page';\nimport { useSearchParams } from 'react-router-dom';\nimport { QuestionList } from './QuestionList';\nimport { searchQuestions } from './QuestionData';\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\nexport const SearchPage = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const questions = useSelector(state => state.questions.searched);\n  const [searchParams] = useSearchParams(); //const [questions, setQuestions] = React.useState<QuestionData[]>([]);\n\n  const search = searchParams.get('criteria') || '';\n  React.useEffect(() => {\n    const doSearch = async criteria => {\n      const foundResults = await searchQuestions(criteria);\n      setQuestions(foundResults);\n    };\n\n    doSearch(search);\n  }, [search]);\n  return _jsxDEV(Page, {\n    title: \"Search results\",\n    children: [search && _jsxDEV(\"p\", {\n      css: css`\n            font-size: 16px;\n            font-style: italic;\n            margin-top: 0px;\n          `,\n      children: [' ', \"for \\\"\", search, \"\\\"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this), _jsxDEV(QuestionList, {\n      data: questions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchPage, \"VWdr0x5vIFurQJcAyh8XDp0O8cA=\", false, function () {\n  return [useDispatch, useSelector, useSearchParams];\n});\n\n_c = SearchPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchPage\");","map":{"version":3,"sources":["/Users/migueljimenez/Projects/QandA/frontend/src/SearchPage.tsx"],"names":["css","Page","useSearchParams","QuestionList","searchQuestions","React","useSelector","useDispatch","SearchPage","dispatch","questions","state","searched","searchParams","search","get","useEffect","doSearch","criteria","foundResults","setQuestions"],"mappings":";;;AAAA;AACA,SAASA,GAAT,QAAoB,gBAApB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,eAAT,QAAgC,gBAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;AAOA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAC9B,QAAMC,QAAQ,GAAGF,WAAW,EAA5B;AACA,QAAMG,SAAS,GAAGJ,WAAW,CAAEK,KAAD,IAAoBA,KAAK,CAACD,SAAN,CAAgBE,QAArC,CAA7B;AACA,QAAM,CAACC,YAAD,IAAiBX,eAAe,EAAtC,CAH8B,CAI9B;;AACA,QAAMY,MAAM,GAAGD,YAAY,CAACE,GAAb,CAAiB,UAAjB,KAAgC,EAA/C;AAEAV,EAAAA,KAAK,CAACW,SAAN,CAAgB,MAAM;AACpB,UAAMC,QAAQ,GAAG,MAAOC,QAAP,IAA4B;AAC3C,YAAMC,YAAY,GAAG,MAAMf,eAAe,CAACc,QAAD,CAA1C;AACAE,MAAAA,YAAY,CAACD,YAAD,CAAZ;AACD,KAHD;;AAIAF,IAAAA,QAAQ,CAACH,MAAD,CAAR;AACD,GAND,EAMG,CAACA,MAAD,CANH;AAQA,SACE,QAAC,IAAD;AAAM,IAAA,KAAK,EAAC,gBAAZ;AAAA,eACGA,MAAM,IACL;AACE,MAAA,GAAG,EAAEd,GAAI;AACnB;AACA;AACA;AACA,WALQ;AAAA,iBAOG,GAPH,YAQQc,MARR;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,EAaE,QAAC,YAAD;AAAc,MAAA,IAAI,EAAEJ;AAApB;AAAA;AAAA;AAAA;AAAA,YAbF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CAhCM;;GAAMF,U;UACMD,W,EACCD,W,EACKJ,e;;;KAHZM,U","sourcesContent":["/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Page } from './Page';\nimport { useSearchParams } from 'react-router-dom';\nimport { QuestionList } from './QuestionList';\nimport { searchQuestions } from './QuestionData';\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  AppState,\n  searchingQuestionsAction,\n  searchedQuestionsAction,\n} from './Store';\n\nexport const SearchPage = () => {\n  const dispatch = useDispatch();\n  const questions = useSelector((state: AppState)=> state.questions.searched);\n  const [searchParams] = useSearchParams();\n  //const [questions, setQuestions] = React.useState<QuestionData[]>([]);\n  const search = searchParams.get('criteria') || '';\n\n  React.useEffect(() => {\n    const doSearch = async (criteria: string) => {\n      const foundResults = await searchQuestions(criteria);\n      setQuestions(foundResults);\n    };\n    doSearch(search);\n  }, [search]);\n\n  return (\n    <Page title=\"Search results\">\n      {search && (\n        <p\n          css={css`\n            font-size: 16px;\n            font-style: italic;\n            margin-top: 0px;\n          `}\n        >\n          {' '}\n          for \"{search}\"\n        </p>\n      )}\n      <QuestionList data={questions}></QuestionList>\n    </Page>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}