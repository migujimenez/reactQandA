{"version":3,"sources":["Page.tsx","QuestionData.ts","PageTitle.tsx","Styles.ts","user.svg","Icons.tsx","Header.tsx","Question.tsx","QuestionList.tsx","Store.ts","HomePage.tsx","SearchPage.tsx","SignInPage.tsx","NotFoundPage.tsx","Answer.tsx","AnswerList.tsx","QuestionPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Page","title","children","css","questions","questionId","content","userName","created","Date","answers","answerId","getUnansweredQuestions","a","wait","filter","q","length","getQuestion","results","searchQuestions","criteria","toLowerCase","indexOf","postQuestion","question","Math","max","map","newQuestion","push","postAnswer","answer","answerInQuestion","ms","Promise","resolve","setTimeout","PageTitle","gray1","gray2","gray3","gray5","gray6","primary2","accent2","fontfamily","fontSize","baseFieldCss","PrimaryButton","styled","button","FieldSet","fieldset","FieldContainer","div","FieldLabel","label","FieldInput","input","FieldTextArea","textarea","FieldError","FormButtonContainer","SubmissionSuccess","UserIcon","src","user","alt","Header","navigate","useNavigate","useForm","register","handleSubmit","useSearchParams","get","to","onSubmit","search","defaultValue","type","placeholder","Question","data","showContent","substring","toLocaleDateString","toLocaleTimeString","QuestionList","renderItem","initialQuestionState","loading","unanswered","viewing","searched","GETTINGUNANSWEREDQUESTIONS","GOTUNANSWEREDQUESTIONS","gotUnansweredQuestionsAction","GETTINGQUESTIONS","GOTQUESTION","gotQuestionAction","SEARCHINGQUESTIONS","SEARCHEDQUESTIONS","searchedQuestionsAction","rootReducer","combineReducers","state","action","HomePage","dispatch","useDispatch","useSelector","questionsLoading","React","useEffect","doGetUnansweredeQuestions","unansweredQuestions","console","log","onClick","SearchPage","doSearch","foundResults","SignInPage","NotFoundPage","Answer","AnswerList","QuestionPage","useState","successfullySubmitted","setSuccessfullySubmitted","useParams","formState","errors","isSubmitting","doGetQuestion","foundQuestion","Number","submitForm","result","Fragment","disabled","htmlFor","required","minLength","id","AskPage","lazy","store","createStore","undefined","App","path","element","Suspense","fallback","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4b0e2004.chunk.js","sourcesContent":["/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport { PageTitle } from './PageTitle';\r\n\r\ninterface Props {\r\n  title?: string;\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const Page = ({ title, children }: Props) => (\r\n  <div\r\n    css={css`\r\n      margin: 50px auto 20px auto;\r\n      padding: 30px 20px;\r\n      max-width: 600px;\r\n    `}\r\n  >\r\n    {title && <PageTitle>{title}</PageTitle>}\r\n    {children}\r\n  </div>\r\n);\r\n","export interface QuestionData {\r\n  questionId: number;\r\n  title: string;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n  answers: AnswerData[];\r\n}\r\n\r\nexport interface AnswerData {\r\n  answerId: number;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\n\r\nexport interface PostQuestionData {\r\n  title: string;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\n\r\nexport interface PostAnswerData {\r\n  questionId: number;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\n\r\nconst questions: QuestionData[] = [\r\n  {\r\n    questionId: 1,\r\n    title: 'Why should I learn TypeScript?',\r\n    content:\r\n      'TypeScript seems to be getting popular so I wondered whether it is worth my time learning it? What benefits does it give over JavaScript?',\r\n    userName: 'Bob',\r\n    created: new Date(),\r\n    answers: [\r\n      {\r\n        answerId: 1,\r\n        content: 'To catch problems earlier speeding up your developments',\r\n        userName: 'Jane',\r\n        created: new Date(),\r\n      },\r\n      {\r\n        answerId: 2,\r\n        content:\r\n          'So, that you can use the JavaScript features of tomorrow, today',\r\n        userName: 'Fred',\r\n        created: new Date(),\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    questionId: 2,\r\n    title: 'Which state management tool should I use?',\r\n    content:\r\n      'There seem to be a fair few state management tools around for React - React, Unstated, ... Which one should I use?',\r\n    userName: 'Bob',\r\n    created: new Date(),\r\n    answers: [],\r\n  },\r\n  {\r\n    questionId: 3,\r\n    title: 'Am I learning React?',\r\n    content:\r\n      \"Yes, I'll keep trying hard because I want an aditional job for earning more money\",\r\n    userName: 'Miguex',\r\n    created: new Date(),\r\n    answers: [],\r\n  },\r\n];\r\n\r\nexport const getUnansweredQuestions = async (): Promise<QuestionData[]> => {\r\n  await wait(500);\r\n  return questions.filter((q) => q.answers.length === 0);\r\n};\r\n\r\nexport const getQuestion = async (\r\n  questionId: number,\r\n): Promise<QuestionData | null> => {\r\n  await wait(500);\r\n  const results = questions.filter((q) => q.questionId === questionId);\r\n  return results.length === 0 ? null : results[0];\r\n};\r\n\r\nexport const searchQuestions = async (\r\n  criteria: string,\r\n): Promise<QuestionData[]> => {\r\n  await wait(500);\r\n  return questions.filter(\r\n    (q) =>\r\n      q.title.toLowerCase().indexOf(criteria.toLowerCase()) >= 0 ||\r\n      q.content.toLowerCase().indexOf(criteria.toLowerCase()) >= 0,\r\n  );\r\n};\r\n\r\nexport const postQuestion = async (\r\n  question: PostQuestionData,\r\n): Promise<QuestionData | undefined> => {\r\n  await wait(500);\r\n  const questionId = Math.max(...questions.map((q) => q.questionId)) + 1;\r\n  const newQuestion: QuestionData = {\r\n    ...question,\r\n    questionId,\r\n    answers: [],\r\n  };\r\n  questions.push(newQuestion);\r\n  return newQuestion;\r\n};\r\n\r\nexport const postAnswer = async (\r\n  answer: PostAnswerData,\r\n): Promise<AnswerData | undefined> => {\r\n  await wait(500);\r\n  const question = questions.filter(\r\n    (q) => q.questionId === answer.questionId,\r\n  )[0];\r\n  const answerInQuestion: AnswerData = {\r\n    answerId: 99,\r\n    ...answer,\r\n  };\r\n  question.answers.push(answerInQuestion);\r\n  return answerInQuestion;\r\n};\r\n\r\nconst wait = (ms: number): Promise<void> => {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n};\r\n","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport React from 'react';\r\n\r\ninterface Props {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const PageTitle = ({ children }: Props) => (\r\n  <h2\r\n    css={css`\r\n      font-size: 15px;\r\n      font-weight: bold;\r\n      margin: 10px 0px 5px;\r\n      text-align: center;\r\n      text-transform: uppercase;\r\n    `}\r\n  >\r\n    {children}\r\n  </h2>\r\n);\r\n","import styled from '@emotion/styled';\r\nimport { css } from '@emotion/react';\r\n\r\nexport const gray1 = '#383737';\r\nexport const gray2 = '#5c5a5a';\r\nexport const gray3 = '#857c81';\r\nexport const gray4 = '#b9b9b9';\r\nexport const gray5 = '#e3e2e2';\r\nexport const gray6 = '#f7f8fa';\r\n\r\nexport const primary1 = '#681c41';\r\nexport const primary2 = '#824c67';\r\n\r\nexport const accent1 = '#dbb365';\r\nexport const accent2 = '#efd197';\r\n\r\nexport const fontfamily = \"'Segoe UI', 'Helvetica Neue', sans-serif\";\r\nexport const fontSize = '16px';\r\n\r\nconst baseFieldCss = css`\r\n  box-sizing: border-box;\r\n  font-family: ${fontfamily};\r\n  font-size: ${fontSize};\r\n  margin-bottom: 5px;\r\n  padding: 8px 10px;\r\n  border: 1px solid ${gray5};\r\n  border-radius: 3px;\r\n  color: ${gray2};\r\n  background-color: white;\r\n  width: 100%;\r\n  :focus {\r\n    outline-color: ${gray5};\r\n  }\r\n  :disabled {\r\n    background-color: ${gray6};\r\n  }\r\n`;\r\n\r\nexport const PrimaryButton = styled.button`\r\n  background-color: ${primary2};\r\n  border-color: ${primary2};\r\n  border-style: solid;\r\n  border-radius: 5px;\r\n  font-family: ${fontfamily};\r\n  font-size: ${fontSize};\r\n  padding: 5px 10px;\r\n  color: white;\r\n  cursor: pointer;\r\n  :hover {\r\n    background-color: ${primary1};\r\n  }\r\n  :focus {\r\n    outline-color: ${primary2};\r\n  }\r\n  :disabled {\r\n    opacity: 0.5;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nexport const FieldSet = styled.fieldset`\r\n  margin: 10px auto 0 auto;\r\n  padding: 30px;\r\n  width: 350px;\r\n  background-color: ${gray6};\r\n  border-radius: 4px;\r\n  border: 1px solid ${gray5};\r\n  box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\r\n`;\r\n\r\nexport const FieldContainer = styled.div`\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nexport const FieldLabel = styled.label`\r\n  font-weight: bold;\r\n`;\r\n\r\nexport const FieldInput = styled.input`\r\n  ${baseFieldCss}\r\n`;\r\n\r\nexport const FieldTextArea = styled.textarea`\r\n  ${baseFieldCss} height:100px;\r\n`;\r\n\r\nexport const FieldError = styled.div`\r\n  font-size: 12px;\r\n  color: red;\r\n`;\r\n\r\nexport const FormButtonContainer = styled.div`\r\n  margin: 30px 0px 0px 0px;\r\n  padding: 20px 0px 0px 0px;\r\n  border-top: 1px solid ${gray5};\r\n`;\r\n\r\nexport const SubmissionSuccess = styled.div`\r\n  margin-top: 10px;\r\n  color: green;\r\n`;\r\n\r\nexport const SubmissionFailure = styled.div`\r\n  margin-top: 10px;\r\n  color: red;\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/user.36491d86.svg\";","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport user from './user.svg';\r\n\r\nexport const UserIcon = () => (\r\n  <img\r\n    src={user}\r\n    alt=\"User\"\r\n    css={css`\r\n      width: 12px;\r\n      opacity: 0.6;\r\n    `}\r\n  />\r\n);\r\n","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport { fontfamily, fontSize, gray1, gray2, gray5 } from './Styles';\r\nimport { UserIcon } from './Icons';\r\nimport { Link, useSearchParams, useNavigate } from 'react-router-dom';\r\nimport React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\n\r\ntype FormData = { search: string };\r\n\r\nexport const Header = () => {\r\n  const navigate = useNavigate();\r\n  const { register, handleSubmit } = useForm<FormData>();\r\n  const [searchParams] = useSearchParams();\r\n  const criteria = searchParams.get('criteria') || '';\r\n\r\n  const submitForm = ({ search }: FormData) => {\r\n    navigate(`search?criteria=${search}`);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      css={css`\r\n        position: fixed;\r\n        box-sizing: border-box;\r\n        top: 0;\r\n        width: 100%;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n        padding: 10px 20px;\r\n        background-color: #fff;\r\n        border-bottom: 1px solid ${gray5};\r\n        box-shadow: 0 3px 7px 0 rgba(110, 112, 114, 0.21);\r\n      `}\r\n    >\r\n      <Link\r\n        to=\"/\"\r\n        css={css`\r\n          font-size: 24px;\r\n          font-weight: bold;\r\n          color: ${gray1};\r\n          text-decoration: none;\r\n        `}\r\n      >\r\n        Q & A\r\n      </Link>\r\n\r\n      <form onSubmit={handleSubmit(submitForm)}>\r\n        <input\r\n          {...register('search')}\r\n          defaultValue={criteria}\r\n          type=\"text\"\r\n          placeholder=\"Search...\"\r\n          //onChange={handleSearchInputChange}\r\n          css={css`\r\n            box-sizing: border-box;\r\n            font-family: ${fontfamily};\r\n            font-size: ${fontSize};\r\n            padding: 8px 10px;\r\n            border: 1px solid ${gray5};\r\n            border-radius: 3px;\r\n            color: ${gray2};\r\n            background-color: white;\r\n            width: 200px;\r\n            height: 30px;\r\n            :focus {\r\n              outline-color: ${gray5};\r\n            }\r\n          `}\r\n        />\r\n      </form>\r\n      <Link\r\n        to=\"./signin\"\r\n        css={css`\r\n          font-family: ${fontfamily};\r\n          font-size: ${fontSize};\r\n          padding: 5px 10px;\r\n          background-color: transparent;\r\n          color: ${gray2};\r\n          text-decoration: none;\r\n          cursor: pointer;\r\n          :focus {\r\n            outline-color: ${gray5};\r\n          }\r\n        `}\r\n      >\r\n        <UserIcon />\r\n        <span\r\n          css={css`\r\n            margin-left: 7px;\r\n          `}\r\n        >\r\n          Sign In\r\n        </span>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport { gray2, gray3 } from './Styles';\r\nimport { QuestionData } from './QuestionData';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface Props {\r\n  data: QuestionData;\r\n  showContent?: boolean;\r\n}\r\n\r\nexport const Question = ({ data, showContent = true }: Props) => (\r\n  <div\r\n    css={css`\r\n      padding: 10px 0px;\r\n      font-size: 19px;\r\n    `}\r\n  >\r\n    <Link\r\n      css={css`\r\n        text-decoration: none;\r\n        color: ${gray2};\r\n      `}\r\n      to={`/questions/${data.questionId}`}\r\n    >\r\n      {data.title}\r\n    </Link>\r\n\r\n    {showContent && (\r\n      <div\r\n        css={css`\r\n          padding-bottom: 10px;\r\n          font-size: 15px;\r\n          color: ${gray2};\r\n        `}\r\n      >\r\n        {data.content.length > 50\r\n          ? `${data.content.substring(0, 50)}...`\r\n          : data.content}\r\n      </div>\r\n    )}\r\n    <div\r\n      css={css`\r\n        font-size: 12px;\r\n        font-style: italic;\r\n        color: ${gray3};\r\n      `}\r\n    >\r\n      {`Asked by nenex ${data.userName} on\r\n            ${data.created.toLocaleDateString()} ${data.created.toLocaleTimeString()}`}\r\n    </div>\r\n  </div>\r\n);\r\n\r\n/* Question.defaultProps = {\r\n  showContent: true,\r\n}; */\r\n","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport { QuestionData } from './QuestionData';\r\nimport { Question } from './Question';\r\nimport { accent2, gray5 } from './Styles';\r\n\r\ninterface Props {\r\n  data: QuestionData[];\r\n  renderItem?: (item: QuestionData) => JSX.Element;\r\n}\r\n\r\nexport const QuestionList = ({ data, renderItem }: Props) => (\r\n  <ul\r\n    css={css`\r\n      list-style: none;\r\n      margin: 10px 0 0 0;\r\n      padding: 0px 20px;\r\n      background-color: #fff;\r\n      border-bottom-left-radius: 4px;\r\n      border-bottom-right-radius: 4px;\r\n      border-top: 3px solid ${accent2};\r\n      box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\r\n    `}\r\n  >\r\n    {data.map((question) => (\r\n      <li\r\n        key={question.questionId}\r\n        css={css`\r\n          border-top: 1px solid ${gray5};\r\n          ::first-of-type {\r\n            border-top: none;\r\n          }\r\n        `}\r\n      >\r\n        {renderItem ? renderItem(question) : <Question data={question} />}\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n","import { QuestionData } from './QuestionData';\r\nimport { Store, createStore, combineReducers } from 'redux';\r\nimport { create } from 'domain';\r\n\r\ninterface QuestionsState {\r\n  readonly loading: boolean;\r\n  readonly unanswered: QuestionData[];\r\n  readonly viewing: QuestionData | null;\r\n  readonly searched: QuestionData[];\r\n}\r\n\r\nexport interface AppState {\r\n  readonly questions: QuestionsState;\r\n}\r\n\r\nconst initialQuestionState: QuestionsState = {\r\n  loading: false,\r\n  unanswered: [],\r\n  viewing: null,\r\n  searched: [],\r\n};\r\n\r\nexport const GETTINGUNANSWEREDQUESTIONS = 'GettingUnansweredeQuestions';\r\n\r\nexport const gettingUnansweredQuestionsAction = () =>\r\n  ({ type: GETTINGUNANSWEREDQUESTIONS } as const);\r\n\r\nexport const GOTUNANSWEREDQUESTIONS = 'GotUnansweredQuestions';\r\n\r\nexport const gotUnansweredQuestionsAction = (questions: QuestionData[]) =>\r\n  ({ type: GOTUNANSWEREDQUESTIONS, questions: questions } as const);\r\n\r\nexport const GETTINGQUESTIONS = 'GettingQuestion';\r\n\r\nexport const gettingQuestionAction = () =>\r\n  ({ type: GETTINGQUESTIONS } as const);\r\n\r\nexport const GOTQUESTION = 'GotQuestion';\r\n\r\nexport const gotQuestionAction = (question: QuestionData | null) =>\r\n  ({ type: GOTQUESTION, question: question } as const);\r\n\r\nexport const SEARCHINGQUESTIONS = 'SearchingQuestions';\r\n\r\nexport const searchingQuestionsAction = () =>\r\n  ({ type: SEARCHINGQUESTIONS } as const);\r\n\r\nexport const SEARCHEDQUESTIONS = 'SearchedQuestions';\r\n\r\nexport const searchedQuestionsAction = (questions: QuestionData[]) =>\r\n  ({ type: SEARCHEDQUESTIONS, questions } as const);\r\n\r\ntype QuestionsActions =\r\n  | ReturnType<typeof gettingUnansweredQuestionsAction>\r\n  | ReturnType<typeof gotUnansweredQuestionsAction>\r\n  | ReturnType<typeof gettingQuestionAction>\r\n  | ReturnType<typeof gotQuestionAction>\r\n  | ReturnType<typeof searchingQuestionsAction>\r\n  | ReturnType<typeof searchedQuestionsAction>;\r\n\r\nconst questionsReducer = (\r\n  state = initialQuestionState,\r\n  action: QuestionsActions,\r\n) => {\r\n  switch (action.type) {\r\n    case GETTINGUNANSWEREDQUESTIONS: {\r\n      return { ...state, loading: true };\r\n    }\r\n    case GOTUNANSWEREDQUESTIONS: {\r\n      return { ...state, unanswered: action.questions, loading: false };\r\n    }\r\n    case GETTINGQUESTIONS: {\r\n      return { ...state, viewing: null, loading: true };\r\n    }\r\n    case GOTQUESTION: {\r\n      return { ...state, viewing: action.question, loading: false };\r\n    }\r\n    case SEARCHINGQUESTIONS: {\r\n      return { ...state, searched: [], loading: true };\r\n    }\r\n    case SEARCHEDQUESTIONS: {\r\n      return { ...state, searched: action.questions, loading: false };\r\n    }\r\n  }\r\n  return state;\r\n};\r\n\r\nconst rootReducer = combineReducers<AppState>({ questions: questionsReducer });\r\n\r\nexport function configureStore(): Store<AppState> {\r\n  const store = createStore(rootReducer, undefined);\r\n  return store;\r\n}\r\n","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport React from 'react';\r\nimport { getUnansweredQuestions, QuestionData } from './QuestionData';\r\nimport { QuestionList } from './QuestionList';\r\nimport { Page } from './Page';\r\nimport { PageTitle } from './PageTitle';\r\nimport { PrimaryButton } from './Styles';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  gettingUnansweredQuestionsAction,\r\n  gotUnansweredQuestionsAction,\r\n  AppState,\r\n} from './Store';\r\nimport { statement } from '@babel/template';\r\n\r\nexport const HomePage = () => {\r\n  const dispatch = useDispatch();\r\n  //const [questions, setQuestions] = React.useState<QuestionData[]>([]);\r\n  const questions = useSelector(\r\n    (state: AppState) => state.questions.unanswered,\r\n  );\r\n\r\n  //const [questionsLoading, setQuestionsLoading] = React.useState(true);\r\n  const questionsLoading = useSelector(\r\n    (state: AppState) => state.questions.loading,\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    const doGetUnansweredeQuestions = async () => {\r\n      dispatch(gettingUnansweredQuestionsAction());\r\n      const unansweredQuestions = await getUnansweredQuestions();\r\n      dispatch(gotUnansweredQuestionsAction(unansweredQuestions));\r\n      //setQuestions(unansweredQuestions);\r\n      //setQuestionsLoading(false);\r\n    };\r\n    doGetUnansweredeQuestions();\r\n    //eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  console.log('rendered');\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleAskQuestionClick = () => {\r\n    //console.log('TODO - move to the AskPage');\r\n    navigate('ask');\r\n  };\r\n\r\n  return (\r\n    <Page>\r\n      <div\r\n        css={css`\r\n          display: flex;\r\n          align-items: center;\r\n          justify-content: space-between;\r\n        `}\r\n      >\r\n        <PageTitle>Unanswered Questions</PageTitle>\r\n        <PrimaryButton onClick={handleAskQuestionClick}>\r\n          Ask a question\r\n        </PrimaryButton>\r\n      </div>\r\n      {questionsLoading ? (\r\n        <div>Loading...</div>\r\n      ) : (\r\n        <QuestionList\r\n          data={questions || []}\r\n          //renderItem={(question) => <div>{question.title}</div>}\r\n        />\r\n      )}\r\n    </Page>\r\n  );\r\n};\r\nfunction state(state: any, AppState: any) {\r\n  throw new Error('Function not implemented.');\r\n}\r\n","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport { Page } from './Page';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { QuestionList } from './QuestionList';\r\nimport { searchQuestions } from './QuestionData';\r\nimport React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  AppState,\r\n  searchingQuestionsAction,\r\n  searchedQuestionsAction,\r\n} from './Store';\r\n\r\nexport const SearchPage = () => {\r\n  const dispatch = useDispatch();\r\n  const questions = useSelector((state: AppState) => state.questions.searched);\r\n  const [searchParams] = useSearchParams();\r\n  //const [questions, setQuestions] = React.useState<QuestionData[]>([]);\r\n  const search = searchParams.get('criteria') || '';\r\n\r\n  React.useEffect(() => {\r\n    const doSearch = async (criteria: string) => {\r\n      dispatch(searchingQuestionsAction());\r\n      const foundResults = await searchQuestions(criteria);\r\n      //setQuestions(foundResults);\r\n      dispatch(searchedQuestionsAction(foundResults));\r\n    };\r\n    doSearch(search);\r\n    //eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [search]);\r\n\r\n  return (\r\n    <Page title=\"Search results\">\r\n      {search && (\r\n        <p\r\n          css={css`\r\n            font-size: 16px;\r\n            font-style: italic;\r\n            margin-top: 0px;\r\n          `}\r\n        >\r\n          {' '}\r\n          for \"{search}\"\r\n        </p>\r\n      )}\r\n      <QuestionList data={questions}></QuestionList>\r\n    </Page>\r\n  );\r\n};\r\n","import { Page } from './Page';\r\n\r\nexport const SignInPage = () => <Page title=\"Sign In\">{null}</Page>;\r\n","import { Page } from './Page';\r\n\r\nexport const NotFoundPage = () => <Page title=\"Page Not Found\">{null}</Page>;\r\n","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport React from 'react';\r\nimport { AnswerData } from './QuestionData';\r\nimport { gray3 } from './Styles';\r\n\r\ninterface Props {\r\n  data: AnswerData;\r\n}\r\n\r\nexport const Answer = ({ data }: Props) => (\r\n  <div\r\n    css={css`\r\n      padding: 10px 0px;\r\n    `}\r\n  >\r\n    <div\r\n      css={css`\r\n        padding: 10px 0px;\r\n        font-size: 13px;\r\n      `}\r\n    >\r\n      {data.content}\r\n    </div>\r\n    <div\r\n      css={css`\r\n        font-size: 12px;\r\n        font-style: italic;\r\n        color: ${gray3};\r\n      `}\r\n    >\r\n      {`Answered by Eva Nupi Wi Wi ${\r\n        data.userName\r\n      } on ${data.created.toLocaleDateString()} ${data.created.toLocaleTimeString()}`}\r\n    </div>\r\n  </div>\r\n);\r\n","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport React from 'react';\r\nimport { AnswerData } from './QuestionData';\r\nimport { Answer } from './Answer';\r\nimport { gray5 } from './Styles';\r\n\r\ninterface Props {\r\n  data: AnswerData[];\r\n}\r\n\r\nexport const AnswerList = ({ data }: Props) => (\r\n  <ul\r\n    css={css`\r\n      list-style: none;\r\n      margin: 10px 0 0 0;\r\n      padding: 0;\r\n    `}\r\n  >\r\n    {data.map((answer) => (\r\n      <li\r\n        css={css`\r\n          border-top: 1px solid ${gray5};\r\n        `}\r\n        key={answer.answerId}\r\n      >\r\n        <Answer data={answer} />\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport {\r\n  gray3,\r\n  gray6,\r\n  FieldSet,\r\n  FieldContainer,\r\n  FieldLabel,\r\n  FieldTextArea,\r\n  FormButtonContainer,\r\n  PrimaryButton,\r\n  FieldError,\r\n  SubmissionSuccess,\r\n} from './Styles';\r\nimport { Page } from './Page';\r\nimport { useParams } from 'react-router';\r\nimport { getQuestion, postAnswer } from './QuestionData';\r\nimport { AnswerList } from './AnswerList';\r\nimport React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { AppState, gettingQuestionAction, gotQuestionAction } from './Store';\r\n\r\ntype FormData = {\r\n  content: string;\r\n};\r\n\r\nexport const QuestionPage = () => {\r\n  const dispatch = useDispatch();\r\n  const question = useSelector((state: AppState) => state.questions.viewing);\r\n  const [successfullySubmitted, setSuccessfullySubmitted] =\r\n    React.useState(false);\r\n  //const [question, setQuestion] = React.useState<QuestionData | null>(null);\r\n  const { questionId } = useParams();\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting },\r\n  } = useForm<FormData>();\r\n\r\n  React.useEffect(() => {\r\n    const doGetQuestion = async (questionId: number) => {\r\n      dispatch(gettingQuestionAction());\r\n      const foundQuestion = await getQuestion(questionId);\r\n      dispatch(gotQuestionAction(foundQuestion));\r\n      //setQuestion(foundQuestion);\r\n    };\r\n    if (questionId) {\r\n      doGetQuestion(Number(questionId));\r\n    }\r\n    //eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [questionId]);\r\n\r\n  const submitForm = async (data: FormData) => {\r\n    const result = await postAnswer({\r\n      questionId: question!.questionId,\r\n      content: data.content,\r\n      userName: 'EvaX',\r\n      created: new Date(),\r\n    });\r\n    setSuccessfullySubmitted(result ? true : false);\r\n  };\r\n\r\n  return (\r\n    <Page>\r\n      <div\r\n        css={css`\r\n          background-color: white;\r\n          padding: 15px 20px 20px 20px;\r\n          border-radius: 4px;\r\n          border: 1px solid ${gray6};\r\n          box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\r\n        `}\r\n      >\r\n        <div\r\n          css={css`\r\n            font-size: 19px;\r\n            font-weight: bold;\r\n            margin: 10px 0px 5px;\r\n          `}\r\n        >\r\n          {question === null ? '' : question.title}\r\n        </div>\r\n        {question !== null && (\r\n          <React.Fragment>\r\n            <p\r\n              css={css`\r\n                margin-top: 0px;\r\n                background-color: white;\r\n              `}\r\n            >\r\n              {question.content}\r\n            </p>\r\n            <div\r\n              css={css`\r\n                font-size: 12px;\r\n                font-style: italic;\r\n                color: ${gray3};\r\n              `}\r\n            >\r\n              {`Asked by Lerox ${question.userName} on\r\n  ${question.created.toLocaleDateString()} \r\n  ${question.created.toLocaleTimeString()}`}\r\n            </div>\r\n            <AnswerList data={question.answers} />\r\n            <form\r\n              onSubmit={handleSubmit(submitForm)}\r\n              css={css`\r\n                margin-top: 20px;\r\n              `}\r\n            >\r\n              <FieldSet disabled={isSubmitting || successfullySubmitted}>\r\n                <FieldContainer>\r\n                  <FieldLabel htmlFor=\"content\">Your Answer</FieldLabel>\r\n                  <FieldTextArea\r\n                    {...register('content', { required: true, minLength: 50 })}\r\n                    id=\"content\"\r\n                  ></FieldTextArea>\r\n                  {errors.content && errors.content.type === 'required' && (\r\n                    <FieldError>You must enter the answer</FieldError>\r\n                  )}\r\n                </FieldContainer>\r\n                <FormButtonContainer>\r\n                  <PrimaryButton type=\"submit\">\r\n                    Submit your answer\r\n                  </PrimaryButton>\r\n                </FormButtonContainer>\r\n                {successfullySubmitted && (\r\n                  <SubmissionSuccess>\r\n                    Your answer was successfully submitted\r\n                  </SubmissionSuccess>\r\n                )}\r\n              </FieldSet>\r\n            </form>\r\n          </React.Fragment>\r\n        )}\r\n      </div>\r\n    </Page>\r\n  );\r\n};\r\n","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\r\nimport { fontfamily, fontSize, gray2 } from './Styles';\r\nimport { Header } from './Header';\r\nimport { HomePage } from './HomePage';\r\n//import { AskPage } from './AskPage';\r\nimport { SearchPage } from './SearchPage';\r\nimport { SignInPage } from './SignInPage';\r\nimport { NotFoundPage } from './NotFoundPage';\r\nimport { QuestionPage } from './QuestionPage';\r\nimport React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { configureStore } from './Store';\r\n\r\nconst AskPage = React.lazy(() => import('./AskPage'));\r\n\r\nconst store = configureStore();\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <div\r\n          css={css`\r\n            font-family: ${fontfamily};\r\n            font-size: ${fontSize};\r\n            color: ${gray2};\r\n          `}\r\n        >\r\n          <Header />\r\n          <Routes>\r\n            <Route path=\"\" element={<HomePage />} />\r\n            <Route path=\"search\" element={<SearchPage />} />\r\n            <Route\r\n              path=\"ask\"\r\n              element={\r\n                <React.Suspense\r\n                  fallback={\r\n                    <div\r\n                      css={css`\r\n                        margin-top: 100px;\r\n                        text-align: center;\r\n                      `}\r\n                    >\r\n                      Loading...\r\n                    </div>\r\n                  }\r\n                >\r\n                  <AskPage />\r\n                </React.Suspense>\r\n              }\r\n            />\r\n            <Route path=\"signin\" element={<SignInPage />} />\r\n            <Route path=\"questions/:questionId\" element={<QuestionPage />} />\r\n            <Route path=\"*\" element={<NotFoundPage />} />\r\n          </Routes>\r\n        </div>\r\n      </BrowserRouter>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}