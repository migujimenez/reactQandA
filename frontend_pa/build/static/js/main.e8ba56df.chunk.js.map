{"version":3,"sources":["Page.tsx","PageTitle.tsx","user.svg","Icons.tsx","Header.tsx","QuestionData.ts","Question.tsx","QuestionList.tsx","HomePage.tsx","SearchPage.tsx","SignInPage.tsx","NotFoundPage.tsx","Answer.tsx","AnswerList.tsx","QuestionPage.tsx","App.tsx","reportWebVitals.ts","index.tsx","Styles.ts"],"names":["Page","title","children","css","PageTitle","UserIcon","src","user","alt","Header","register","useForm","useSearchParams","criteria","get","gray5","to","gray1","onSubmit","e","preventDefault","defaultValue","type","placeholder","fontfamily","fontSize","gray2","questions","questionId","content","userName","created","Date","answers","answerId","getUnansweredQuestions","a","wait","filter","q","length","getQuestion","results","searchQuestions","toLowerCase","indexOf","ms","Promise","resolve","setTimeout","Question","data","showContent","substring","gray3","toLocaleDateString","toLocaleTimeString","QuestionList","renderItem","accent2","map","question","HomePage","React","useState","setQuestions","questionsLoading","setQuestionsLoading","useEffect","unansweredQuestions","doGetUnansweredeQuestions","console","log","navigate","useNavigate","onClick","SearchPage","searchParams","search","foundResults","doSearch","SignInPage","NotFoundPage","Answer","AnswerList","answer","QuestionPage","setQuestion","useParams","foundQuestion","doGetQuestion","Number","gray6","Fragment","htmlFor","id","AskPage","lazy","App","path","element","Suspense","fallback","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","primary2","baseFieldCss","PrimaryButton","styled","button","FieldSet","fieldset","FieldContainer","div","FieldLabel","label","FieldInput","input","FieldTextArea","textarea","FieldError","FormButtonContainer"],"mappings":"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","file":"static/js/main.e8ba56df.chunk.js","sourcesContent":["/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { PageTitle } from './PageTitle';\n\ninterface Props {\n  title?: string;\n  children: React.ReactNode;\n}\n\nexport const Page = ({ title, children }: Props) => (\n  <div\n    css={css`\n      margin: 50px auto 20px auto;\n      padding: 30px 20px;\n      max-width: 600px;\n    `}\n  >\n    {title && <PageTitle>{title}</PageTitle>}\n    {children}\n  </div>\n);\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport React from 'react';\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nexport const PageTitle = ({ children }: Props) => (\n  <h2\n    css={css`\n      font-size: 15px;\n      font-weight: bold;\n      margin: 10px 0px 5px;\n      text-align: center;\n      text-transform: uppercase;\n    `}\n  >\n    {children}\n  </h2>\n);\n","export default __webpack_public_path__ + \"static/media/user.7152f995.svg\";","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport user from './user.svg';\n\nexport const UserIcon = () => (\n  <img\n    src={user}\n    alt=\"User\"\n    css={css`\n      width: 12px;\n      opacity: 0.6;\n    `}\n  />\n);\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { fontfamily, fontSize, gray1, gray2, gray5 } from './Styles';\nimport { UserIcon } from './Icons';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\n\ntype FormData = { search: string };\n\nexport const Header = () => {\n  const { register } = useForm<FormData>();\n  const [searchParams] = useSearchParams();\n  const criteria = searchParams.get('criteria') || '';\n\n  //const [search, setSearch] = React.useState(criteria);\n\n  /*   const handleSearchInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    //console.log(e.currentTarget.value);\n    setSearch(e.currentTarget.value);\n  }; */\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    //console.log(search);\n  };\n\n  return (\n    <div\n      css={css`\n        position: fixed;\n        box-sizing: border-box;\n        top: 0;\n        width: 100%;\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        padding: 10px 20px;\n        background-color: #fff;\n        border-bottom: 1px solid ${gray5};\n        box-shadow: 0 3px 7px 0 rgba(110, 112, 114, 0.21);\n      `}\n    >\n      <Link\n        to=\"/\"\n        css={css`\n          font-size: 24px;\n          font-weight: bold;\n          color: ${gray1};\n          text-decoration: none;\n        `}\n      >\n        Q & A\n      </Link>\n\n      <form onSubmit={handleSubmit}>\n        <input\n          {...register('search')}\n          defaultValue={criteria}\n          type=\"text\"\n          placeholder=\"Search...\"\n          //onChange={handleSearchInputChange}\n          css={css`\n            box-sizing: border-box;\n            font-family: ${fontfamily};\n            font-size: ${fontSize};\n            padding: 8px 10px;\n            border: 1px solid ${gray5};\n            border-radius: 3px;\n            color: ${gray2};\n            background-color: white;\n            width: 200px;\n            height: 30px;\n            :focus {\n              outline-color: ${gray5};\n            }\n          `}\n        />\n      </form>\n      <Link\n        to=\"./signin\"\n        css={css`\n          font-family: ${fontfamily};\n          font-size: ${fontSize};\n          padding: 5px 10px;\n          background-color: transparent;\n          color: ${gray2};\n          text-decoration: none;\n          cursor: pointer;\n          :focus {\n            outline-color: ${gray5};\n          }\n        `}\n      >\n        <UserIcon />\n        <span\n          css={css`\n            margin-left: 7px;\n          `}\n        >\n          Sign In\n        </span>\n      </Link>\n    </div>\n  );\n};\n","export interface QuestionData {\n  questionId: number;\n  title: string;\n  content: string;\n  userName: string;\n  created: Date;\n  answers: AnswerData[];\n}\n\nexport interface AnswerData {\n  answerId: number;\n  content: string;\n  userName: string;\n  created: Date;\n}\n\nconst questions: QuestionData[] = [\n  {\n    questionId: 1,\n    title: 'Why should I learn TypeScript?',\n    content:\n      'TypeScript seems to be getting popular so I wondered whether it is worth my time learning it? What benefits does it give over JavaScript?',\n    userName: 'Bob',\n    created: new Date(),\n    answers: [\n      {\n        answerId: 1,\n        content: 'To catch problems earlier speeding up your developments',\n        userName: 'Jane',\n        created: new Date(),\n      },\n      {\n        answerId: 2,\n        content:\n          'So, that you can use the JavaScript features of tomorrow, today',\n        userName: 'Fred',\n        created: new Date(),\n      },\n    ],\n  },\n  {\n    questionId: 2,\n    title: 'Which state management tool should I use?',\n    content:\n      'There seem to be a fair few state management tools around for React - React, Unstated, ... Which one should I use?',\n    userName: 'Bob',\n    created: new Date(),\n    answers: [],\n  },\n  {\n    questionId: 3,\n    title: 'Am I learning React?',\n    content:\n      \"Yes, I'll keep trying hard because I want an aditional job for earning more money\",\n    userName: 'Miguex',\n    created: new Date(),\n    answers: [],\n  },\n];\n\nexport const getUnansweredQuestions = async (): Promise<QuestionData[]> => {\n  await wait(500);\n  return questions.filter((q) => q.answers.length === 0);\n};\n\nexport const getQuestion = async (\n  questionId: number,\n): Promise<QuestionData | null> => {\n  await wait(500);\n  const results = questions.filter((q) => q.questionId === questionId);\n  return results.length === 0 ? null : results[0];\n};\n\nexport const searchQuestions = async (\n  criteria: string,\n): Promise<QuestionData[]> => {\n  await wait(500);\n  return questions.filter(\n    (q) =>\n      q.title.toLowerCase().indexOf(criteria.toLowerCase()) >= 0 ||\n      q.content.toLowerCase().indexOf(criteria.toLowerCase()) >= 0,\n  );\n};\n\nconst wait = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { gray2, gray3 } from './Styles';\nimport { QuestionData } from './QuestionData';\nimport { Link } from 'react-router-dom';\n\ninterface Props {\n  data: QuestionData;\n  showContent?: boolean;\n}\n\nexport const Question = ({ data, showContent = true }: Props) => (\n  <div\n    css={css`\n      padding: 10px 0px;\n      font-size: 19px;\n    `}\n  >\n    <Link\n      css={css`\n        text-decoration: none;\n        color: ${gray2};\n      `}\n      to={`/questions/${data.questionId}`}\n    >\n      {data.title}\n    </Link>\n\n    {showContent && (\n      <div\n        css={css`\n          padding-bottom: 10px;\n          font-size: 15px;\n          color: ${gray2};\n        `}\n      >\n        {data.content.length > 50\n          ? `${data.content.substring(0, 50)}...`\n          : data.content}\n      </div>\n    )}\n    <div\n      css={css`\n        font-size: 12px;\n        font-style: italic;\n        color: ${gray3};\n      `}\n    >\n      {`Asked by nenex ${data.userName} on\n            ${data.created.toLocaleDateString()} ${data.created.toLocaleTimeString()}`}\n    </div>\n  </div>\n);\n\n/* Question.defaultProps = {\n  showContent: true,\n}; */\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { QuestionData } from './QuestionData';\nimport { Question } from './Question';\nimport { accent2, gray5 } from './Styles';\n\ninterface Props {\n  data: QuestionData[];\n  renderItem?: (item: QuestionData) => JSX.Element;\n}\n\nexport const QuestionList = ({ data, renderItem }: Props) => (\n  <ul\n    css={css`\n      list-style: none;\n      margin: 10px 0 0 0;\n      padding: 0px 20px;\n      background-color: #fff;\n      border-bottom-left-radius: 4px;\n      border-bottom-right-radius: 4px;\n      border-top: 3px solid ${accent2};\n      box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\n    `}\n  >\n    {data.map((question) => (\n      <li\n        key={question.questionId}\n        css={css`\n          border-top: 1px solid ${gray5};\n          ::first-of-type {\n            border-top: none;\n          }\n        `}\n      >\n        {renderItem ? renderItem(question) : <Question data={question} />}\n      </li>\n    ))}\n  </ul>\n);\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport React from 'react';\nimport { getUnansweredQuestions, QuestionData } from './QuestionData';\nimport { QuestionList } from './QuestionList';\nimport { Page } from './Page';\nimport { PageTitle } from './PageTitle';\nimport { PrimaryButton } from './Styles';\nimport { useNavigate } from 'react-router-dom';\n\nexport const HomePage = () => {\n  const [questions, setQuestions] = React.useState<QuestionData[]>([]);\n  const [questionsLoading, setQuestionsLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    const doGetUnansweredeQuestions = async () => {\n      const unansweredQuestions = await getUnansweredQuestions();\n      setQuestions(unansweredQuestions);\n      setQuestionsLoading(false);\n    };\n    doGetUnansweredeQuestions();\n  }, []);\n\n  console.log('rendered');\n\n  const navigate = useNavigate();\n\n  const handleAskQuestionClick = () => {\n    //console.log('TODO - move to the AskPage');\n    navigate('ask');\n  };\n\n  return (\n    <Page>\n      <div\n        css={css`\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n        `}\n      >\n        <PageTitle>Unanswered Questions</PageTitle>\n        <PrimaryButton onClick={handleAskQuestionClick}>\n          Ask a question\n        </PrimaryButton>\n      </div>\n      {questionsLoading ? (\n        <div>Loading...</div>\n      ) : (\n        <QuestionList\n          data={questions || []}\n          //renderItem={(question) => <div>{question.title}</div>}\n        />\n      )}\n    </Page>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Page } from './Page';\nimport { useSearchParams } from 'react-router-dom';\nimport { QuestionList } from './QuestionList';\nimport { searchQuestions, QuestionData } from './QuestionData';\nimport React from 'react';\n\nexport const SearchPage = () => {\n  const [searchParams] = useSearchParams();\n  const [questions, setQuestions] = React.useState<QuestionData[]>([]);\n  const search = searchParams.get('criteria') || '';\n\n  React.useEffect(() => {\n    const doSearch = async (criteria: string) => {\n      const foundResults = await searchQuestions(criteria);\n      setQuestions(foundResults);\n    };\n    doSearch(search);\n  }, [search]);\n\n  return (\n    <Page title=\"Search results\">\n      {search && (\n        <p\n          css={css`\n            font-size: 16px;\n            font-style: italic;\n            margin-top: 0px;\n          `}\n        >\n          {' '}\n          for \"{search}\"\n        </p>\n      )}\n      <QuestionList data={questions}></QuestionList>\n    </Page>\n  );\n};\n","import { Page } from './Page';\n\nexport const SignInPage = () => <Page title=\"Sign In\">{null}</Page>;\n","import { Page } from './Page';\n\nexport const NotFoundPage = () => <Page title=\"Page Not Found\">{null}</Page>;\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport React from 'react';\nimport { AnswerData } from './QuestionData';\nimport { gray3 } from './Styles';\n\ninterface Props {\n  data: AnswerData;\n}\n\nexport const Answer = ({ data }: Props) => (\n  <div\n    css={css`\n      padding: 10px 0px;\n    `}\n  >\n    <div\n      css={css`\n        padding: 10px 0px;\n        font-size: 13px;\n      `}\n    >\n      {data.content}\n    </div>\n    <div\n      css={css`\n        font-size: 12px;\n        font-style: italic;\n        color: ${gray3};\n      `}\n    >\n      {`Answered by Eva Nupi Wi Wi ${\n        data.userName\n      } on ${data.created.toLocaleDateString()} ${data.created.toLocaleTimeString()}`}\n    </div>\n  </div>\n);\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport React from 'react';\nimport { AnswerData } from './QuestionData';\nimport { Answer } from './Answer';\nimport { gray5 } from './Styles';\n\ninterface Props {\n  data: AnswerData[];\n}\n\nexport const AnswerList = ({ data }: Props) => (\n  <ul\n    css={css`\n      list-style: none;\n      margin: 10px 0 0 0;\n      padding: 0;\n    `}\n  >\n    {data.map((answer) => (\n      <li\n        css={css`\n          border-top: 1px solid ${gray5};\n        `}\n        key={answer.answerId}\n      >\n        <Answer data={answer} />\n      </li>\n    ))}\n  </ul>\n);\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport {\n  gray3,\n  gray6,\n  FieldSet,\n  FieldContainer,\n  FieldLabel,\n  FieldTextArea,\n  FormButtonContainer,\n  PrimaryButton,\n} from './Styles';\nimport { Page } from './Page';\nimport { useParams } from 'react-router';\nimport { QuestionData, getQuestion } from './QuestionData';\nimport { AnswerList } from './AnswerList';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\n\ntype FormData = {\n  content: string;\n};\n\nexport const QuestionPage = () => {\n  const [question, setQuestion] = React.useState<QuestionData | null>(null);\n  const { questionId } = useParams();\n\n  const { register } = useForm<FormData>();\n\n  React.useEffect(() => {\n    const doGetQuestion = async (questionId: number) => {\n      const foundQuestion = await getQuestion(questionId);\n      setQuestion(foundQuestion);\n    };\n    if (questionId) {\n      doGetQuestion(Number(questionId));\n    }\n  }, [questionId]);\n\n  return (\n    <Page>\n      <div\n        css={css`\n          background-color: white;\n          padding: 15px 20px 20px 20px;\n          border-radius: 4px;\n          border: 1px solid ${gray6};\n          box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\n        `}\n      >\n        <div\n          css={css`\n            font-size: 19px;\n            font-weight: bold;\n            margin: 10px 0px 5px;\n          `}\n        >\n          {question === null ? '' : question.title}\n        </div>\n        {question !== null && (\n          <React.Fragment>\n            <p\n              css={css`\n                margin-top: 0px;\n                background-color: white;\n              `}\n            >\n              {question.content}\n            </p>\n            <div\n              css={css`\n                font-size: 12px;\n                font-style: italic;\n                color: ${gray3};\n              `}\n            >\n              {`Asked by Lerox ${question.userName} on\n  ${question.created.toLocaleDateString()} \n  ${question.created.toLocaleTimeString()}`}\n            </div>\n            <AnswerList data={question.answers} />\n            <form\n              css={css`\n                margin-top: 20px;\n              `}\n            >\n              <FieldSet>\n                <FieldContainer>\n                  <FieldLabel htmlFor=\"content\">Your Answer</FieldLabel>\n                  <FieldTextArea\n                    {...register('content')}\n                    id=\"content\"\n                  ></FieldTextArea>\n                </FieldContainer>\n                <FormButtonContainer>\n                  <PrimaryButton type=\"submit\">\n                    Submit your answer\n                  </PrimaryButton>\n                </FormButtonContainer>\n              </FieldSet>\n            </form>\n          </React.Fragment>\n        )}\n      </div>\n    </Page>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport { fontfamily, fontSize, gray2 } from './Styles';\nimport { Header } from './Header';\nimport { HomePage } from './HomePage';\n//import { AskPage } from './AskPage';\nimport { SearchPage } from './SearchPage';\nimport { SignInPage } from './SignInPage';\nimport { NotFoundPage } from './NotFoundPage';\nimport { QuestionPage } from './QuestionPage';\nimport React from 'react';\n\nconst AskPage = React.lazy(() => import('./AskPage'));\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div\n        css={css`\n          font-family: ${fontfamily};\n          font-size: ${fontSize};\n          color: ${gray2};\n        `}\n      >\n        <Header />\n        <Routes>\n          <Route path=\"\" element={<HomePage />} />\n          <Route path=\"search\" element={<SearchPage />} />\n          <Route\n            path=\"ask\"\n            element={\n              <React.Suspense\n                fallback={\n                  <div\n                    css={css`\n                      margin-top: 100px;\n                      text-align: center;\n                    `}\n                  >\n                    Loading...\n                  </div>\n                }\n              >\n                <AskPage />\n              </React.Suspense>\n            }\n          />\n          <Route path=\"signin\" element={<SignInPage />} />\n          <Route path=\"questions/:questionId\" element={<QuestionPage />} />\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import styled from '@emotion/styled';\nimport { css } from '@emotion/react';\n\nexport const gray1 = '#383737';\nexport const gray2 = '#5c5a5a';\nexport const gray3 = '#857c81';\nexport const gray4 = '#b9b9b9';\nexport const gray5 = '#e3e2e2';\nexport const gray6 = '#f7f8fa';\n\nexport const primary1 = '#681c41';\nexport const primary2 = '#824c67';\n\nexport const accent1 = '#dbb365';\nexport const accent2 = '#efd197';\n\nexport const fontfamily = \"'Segoe UI', 'Helvetica Neue', sans-serif\";\nexport const fontSize = '16px';\n\nconst baseFieldCss = css`\n  box-sizing: border-box;\n  font-family: ${fontfamily};\n  font-size: ${fontSize};\n  margin-bottom: 5px;\n  padding: 8px 10px;\n  border: 1px solid ${gray5};\n  border-radius: 3px;\n  color: ${gray2};\n  background-color: white;\n  width: 100%;\n  :focus {\n    outline-color: ${gray5};\n  }\n  :disabled {\n    background-color: ${gray6};\n  }\n`;\n\nexport const PrimaryButton = styled.button`\n  background-color: ${primary2};\n  border-color: ${primary2};\n  border-style: solid;\n  border-radius: 5px;\n  font-family: ${fontfamily};\n  font-size: ${fontSize};\n  padding: 5px 10px;\n  color: white;\n  cursor: pointer;\n  :hover {\n    background-color: ${primary1};\n  }\n  :focus {\n    outline-color: ${primary2};\n  }\n  :disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n\nexport const FieldSet = styled.fieldset`\n  margin: 10px auto 0 auto;\n  padding: 30px;\n  width: 350px;\n  background-color: ${gray6};\n  border-radius: 4px;\n  border: 1px solid ${gray5};\n  box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\n`;\n\nexport const FieldContainer = styled.div`\n  margin-bottom: 10px;\n`;\n\nexport const FieldLabel = styled.label`\n  font-weight: bold;\n`;\n\nexport const FieldInput = styled.input`\n  ${baseFieldCss}\n`;\n\nexport const FieldTextArea = styled.textarea`\n  ${baseFieldCss} height:100px;\n`;\n\nexport const FieldError = styled.div`\n  font-size: 12px;\n  color: red;\n`;\n\nexport const FormButtonContainer = styled.div`\n  margin: 30px 0px 0px 0px;\n  padding: 20px 0px 0px 0px;\n  border-top: 1px solid ${gray5};\n`;\n\nexport const SubmissionSuccess = styled.div`\n  margin-top: 10px;\n  color: green;\n`;\n\nexport const SubmissionFailure = styled.div`\n  margin-top: 10px;\n  color: red;\n`;\n"],"sourceRoot":""}