{"ast":null,"code":"var _jsxFileName = \"/Users/migueljimenez/Projects/QandA/frontend/src/QuestionPage.tsx\",\n    _s = $RefreshSig$();\n\n/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { gray3, gray6, FieldSet, FieldContainer, FieldLabel, FieldTextArea, FormButtonContainer, PrimaryButton, FieldError, SubmissionSuccess } from './Styles';\nimport { Page } from './Page';\nimport { useParams } from 'react-router';\nimport { getQuestion, postAnswer } from './QuestionData';\nimport { AnswerList } from './AnswerList';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\nexport const QuestionPage = () => {\n  _s();\n\n  const [successfullySubmitted, setSuccessfullySubmitted] = React.useState(false);\n  const [question, setQuestion] = React.useState(null);\n  const {\n    questionId\n  } = useParams();\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors,\n      isSubmitting\n    }\n  } = useForm();\n  React.useEffect(() => {\n    const doGetQuestion = async questionId => {\n      const foundQuestion = await getQuestion(questionId);\n      setQuestion(foundQuestion);\n    };\n\n    if (questionId) {\n      doGetQuestion(Number(questionId));\n    }\n  }, [questionId]);\n\n  const submitForm = async data => {\n    const result = await postAnswer({\n      questionId: question.questionId,\n      content: data.content,\n      userName: 'EvaX',\n      created: new Date()\n    });\n    setSuccessfullySubmitted(result ? true : false);\n  };\n\n  return _jsxDEV(Page, {\n    children: _jsxDEV(\"div\", {\n      css: css`\n          background-color: white;\n          padding: 15px 20px 20px 20px;\n          border-radius: 4px;\n          border: 1px solid ${gray6};\n          box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\n        `,\n      children: [_jsxDEV(\"div\", {\n        css: css`\n            font-size: 19px;\n            font-weight: bold;\n            margin: 10px 0px 5px;\n          `,\n        children: question === null ? '' : question.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), question !== null && _jsxDEV(React.Fragment, {\n        children: [_jsxDEV(\"p\", {\n          css: css`\n                margin-top: 0px;\n                background-color: white;\n              `,\n          children: question.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), _jsxDEV(\"div\", {\n          css: css`\n                font-size: 12px;\n                font-style: italic;\n                color: ${gray3};\n              `,\n          children: `Asked by Lerox ${question.userName} on\n  ${question.created.toLocaleDateString()} \n  ${question.created.toLocaleTimeString()}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this), _jsxDEV(AnswerList, {\n          data: question.answers\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this), _jsxDEV(\"form\", {\n          onSubmit: handleSubmit(submitForm),\n          css: css`\n                margin-top: 20px;\n              `,\n          children: _jsxDEV(FieldSet, {\n            disabled: isSubmitting || successfullySubmitted,\n            children: [_jsxDEV(FieldContainer, {\n              children: [_jsxDEV(FieldLabel, {\n                htmlFor: \"content\",\n                children: \"Your Answer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 19\n              }, this), _jsxDEV(FieldTextArea, { ...register('content', {\n                  required: true,\n                  minLength: 50\n                }),\n                id: \"content\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 19\n              }, this), errors.content && errors.content.type === 'required' && _jsxDEV(FieldError, {\n                children: \"You must enter the answer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 17\n            }, this), _jsxDEV(FormButtonContainer, {\n              children: _jsxDEV(PrimaryButton, {\n                type: \"submit\",\n                children: \"Submit your answer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 17\n            }, this), successfullySubmitted && _jsxDEV(SubmissionSuccess, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 44\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(QuestionPage, \"btISp+AxXlNsamerEyg3XKPu7Ec=\", false, function () {\n  return [useParams, useForm];\n});\n\n_c = QuestionPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionPage\");","map":{"version":3,"sources":["/Users/migueljimenez/Projects/QandA/frontend/src/QuestionPage.tsx"],"names":["css","gray3","gray6","FieldSet","FieldContainer","FieldLabel","FieldTextArea","FormButtonContainer","PrimaryButton","FieldError","SubmissionSuccess","Page","useParams","getQuestion","postAnswer","AnswerList","React","useForm","QuestionPage","successfullySubmitted","setSuccessfullySubmitted","useState","question","setQuestion","questionId","register","handleSubmit","formState","errors","isSubmitting","useEffect","doGetQuestion","foundQuestion","Number","submitForm","data","result","content","userName","created","Date","title","toLocaleDateString","toLocaleTimeString","answers","required","minLength","type"],"mappings":"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","sourcesContent":["/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport {\n  gray3,\n  gray6,\n  FieldSet,\n  FieldContainer,\n  FieldLabel,\n  FieldTextArea,\n  FormButtonContainer,\n  PrimaryButton,\n  FieldError,\n  SubmissionSuccess,\n} from './Styles';\nimport { Page } from './Page';\nimport { useParams } from 'react-router';\nimport { QuestionData, getQuestion, postAnswer } from './QuestionData';\nimport { AnswerList } from './AnswerList';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\n\ntype FormData = {\n  content: string;\n};\n\nexport const QuestionPage = () => {\n  const [successfullySubmitted, setSuccessfullySubmitted] =\n    React.useState(false);\n  const [question, setQuestion] = React.useState<QuestionData | null>(null);\n  const { questionId } = useParams();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isSubmitting },\n  } = useForm<FormData>();\n\n  React.useEffect(() => {\n    const doGetQuestion = async (questionId: number) => {\n      const foundQuestion = await getQuestion(questionId);\n      setQuestion(foundQuestion);\n    };\n    if (questionId) {\n      doGetQuestion(Number(questionId));\n    }\n  }, [questionId]);\n\n  const submitForm = async (data: FormData) => {\n    const result = await postAnswer({\n      questionId: question!.questionId,\n      content: data.content,\n      userName: 'EvaX',\n      created: new Date(),\n    });\n    setSuccessfullySubmitted(result ? true : false);\n  };\n\n  return (\n    <Page>\n      <div\n        css={css`\n          background-color: white;\n          padding: 15px 20px 20px 20px;\n          border-radius: 4px;\n          border: 1px solid ${gray6};\n          box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\n        `}\n      >\n        <div\n          css={css`\n            font-size: 19px;\n            font-weight: bold;\n            margin: 10px 0px 5px;\n          `}\n        >\n          {question === null ? '' : question.title}\n        </div>\n        {question !== null && (\n          <React.Fragment>\n            <p\n              css={css`\n                margin-top: 0px;\n                background-color: white;\n              `}\n            >\n              {question.content}\n            </p>\n            <div\n              css={css`\n                font-size: 12px;\n                font-style: italic;\n                color: ${gray3};\n              `}\n            >\n              {`Asked by Lerox ${question.userName} on\n  ${question.created.toLocaleDateString()} \n  ${question.created.toLocaleTimeString()}`}\n            </div>\n            <AnswerList data={question.answers} />\n            <form\n              onSubmit={handleSubmit(submitForm)}\n              css={css`\n                margin-top: 20px;\n              `}\n            >\n              <FieldSet disabled={isSubmitting || successfullySubmitted}>\n                <FieldContainer>\n                  <FieldLabel htmlFor=\"content\">Your Answer</FieldLabel>\n                  <FieldTextArea\n                    {...register('content', { required: true, minLength: 50 })}\n                    id=\"content\"\n                  ></FieldTextArea>\n                  {errors.content && errors.content.type === 'required' && (\n                    <FieldError>You must enter the answer</FieldError>\n                  )}\n                </FieldContainer>\n                <FormButtonContainer>\n                  <PrimaryButton type=\"submit\">\n                    Submit your answer\n                  </PrimaryButton>\n                </FormButtonContainer>\n                {successfullySubmitted && (<SubmissionSuccess></SubmissionSuccess>)}\n              </FieldSet>\n            </form>\n          </React.Fragment>\n        )}\n      </div>\n    </Page>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}