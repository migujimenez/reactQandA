{"ast":null,"code":"var _jsxFileName = \"C:\\\\MyApps\\\\reactQandA\\\\clientApp\\\\src\\\\QuestionPage.tsx\",\n    _s = $RefreshSig$();\n\n/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { gray3, gray6, FieldSet, FieldContainer, FieldLabel, FieldTextArea, FormButtonContainer, PrimaryButton, FieldError, SubmissionSuccess } from './Styles';\nimport { Page } from './Page';\nimport { useParams } from 'react-router';\nimport { getQuestion, postAnswer } from './QuestionData';\nimport { AnswerList } from './AnswerList';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useAuth } from './Auth';\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\nexport const QuestionPage = () => {\n  _s();\n\n  const [successfullySubmitted, setSuccessfullySubmitted] = React.useState(false);\n  const [question, setQuestion] = React.useState(null);\n  const {\n    questionId\n  } = useParams();\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors,\n      isSubmitting\n    }\n  } = useForm();\n  React.useEffect(() => {\n    const doGetQuestion = async questionId => {\n      const foundQuestion = await getQuestion(questionId);\n      setQuestion(foundQuestion);\n    };\n\n    if (questionId) {\n      doGetQuestion(Number(questionId));\n    } //eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [questionId]);\n\n  const submitForm = async data => {\n    const result = await postAnswer({\n      questionId: question.questionId,\n      content: data.content,\n      userName: 'EvaX',\n      created: new Date()\n    });\n    setSuccessfullySubmitted(result ? true : false);\n  };\n\n  const {\n    isAuthenticated\n  } = useAuth();\n  return _jsxDEV(Page, {\n    children: _jsxDEV(\"div\", {\n      css: css`\n          background-color: white;\n          padding: 15px 20px 20px 20px;\n          border-radius: 4px;\n          border: 1px solid ${gray6};\n          box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\n        `,\n      children: [_jsxDEV(\"div\", {\n        css: css`\n            font-size: 19px;\n            font-weight: bold;\n            margin: 10px 0px 5px;\n          `,\n        children: question === null ? '' : question.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), question !== null && _jsxDEV(React.Fragment, {\n        children: [_jsxDEV(\"p\", {\n          css: css`\n                margin-top: 0px;\n                background-color: white;\n              `,\n          children: question.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this), _jsxDEV(\"div\", {\n          css: css`\n                font-size: 12px;\n                font-style: italic;\n                color: ${gray3};\n              `,\n          children: `Asked by NupiLerox ${question.userName} on\n  ${question.created.toLocaleDateString()} \n  ${question.created.toLocaleTimeString()}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), _jsxDEV(AnswerList, {\n          data: question.answers\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this), _jsxDEV(\"form\", {\n          onSubmit: handleSubmit(submitForm),\n          css: css`\n                margin-top: 20px;\n              `,\n          children: _jsxDEV(FieldSet, {\n            disabled: isSubmitting || successfullySubmitted,\n            children: [_jsxDEV(FieldContainer, {\n              children: [_jsxDEV(FieldLabel, {\n                htmlFor: \"content\",\n                children: \"Your Answer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 19\n              }, this), _jsxDEV(FieldTextArea, { ...register('content', {\n                  required: true,\n                  minLength: 50\n                }),\n                id: \"content\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 19\n              }, this), errors.content && errors.content.type === 'required' && _jsxDEV(FieldError, {\n                children: \"You must enter the answer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 17\n            }, this), _jsxDEV(FormButtonContainer, {\n              children: _jsxDEV(PrimaryButton, {\n                type: \"submit\",\n                children: \"Submit your answer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 17\n            }, this), successfullySubmitted && _jsxDEV(SubmissionSuccess, {\n              children: \"Your answer was successfully submitted\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n_s(QuestionPage, \"Z0fjFJZRAH9xWh2FYwU37GrxR18=\", false, function () {\n  return [useParams, useForm, useAuth];\n});\n\n_c = QuestionPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionPage\");","map":{"version":3,"sources":["C:/MyApps/reactQandA/clientApp/src/QuestionPage.tsx"],"names":["css","gray3","gray6","FieldSet","FieldContainer","FieldLabel","FieldTextArea","FormButtonContainer","PrimaryButton","FieldError","SubmissionSuccess","Page","useParams","getQuestion","postAnswer","AnswerList","React","useForm","useAuth","QuestionPage","successfullySubmitted","setSuccessfullySubmitted","useState","question","setQuestion","questionId","register","handleSubmit","formState","errors","isSubmitting","useEffect","doGetQuestion","foundQuestion","Number","submitForm","data","result","content","userName","created","Date","isAuthenticated","title","toLocaleDateString","toLocaleTimeString","answers","required","minLength","type"],"mappings":"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","sourcesContent":["/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport {\r\n  gray3,\r\n  gray6,\r\n  FieldSet,\r\n  FieldContainer,\r\n  FieldLabel,\r\n  FieldTextArea,\r\n  FormButtonContainer,\r\n  PrimaryButton,\r\n  FieldError,\r\n  SubmissionSuccess,\r\n} from './Styles';\r\nimport { Page } from './Page';\r\nimport { useParams } from 'react-router';\r\nimport { getQuestion, postAnswer, QuestionData } from './QuestionData';\r\nimport { AnswerList } from './AnswerList';\r\nimport React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useAuth } from './Auth';\r\n\r\ntype FormData = {\r\n  content: string;\r\n};\r\n\r\nexport const QuestionPage = () => {\r\n  const [successfullySubmitted, setSuccessfullySubmitted] =\r\n    React.useState(false);\r\n  const [question, setQuestion] = React.useState<QuestionData | null>(null);\r\n  const { questionId } = useParams();\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting },\r\n  } = useForm<FormData>();\r\n\r\n  React.useEffect(() => {\r\n    const doGetQuestion = async (questionId: number) => {\r\n      const foundQuestion = await getQuestion(questionId);\r\n      setQuestion(foundQuestion);\r\n    };\r\n    if (questionId) {\r\n      doGetQuestion(Number(questionId));\r\n    }\r\n    //eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [questionId]);\r\n\r\n  const submitForm = async (data: FormData) => {\r\n    const result = await postAnswer({\r\n      questionId: question!.questionId,\r\n      content: data.content,\r\n      userName: 'EvaX',\r\n      created: new Date(),\r\n    });\r\n    setSuccessfullySubmitted(result ? true : false);\r\n  };\r\n\r\n  const { isAuthenticated } = useAuth();\r\n\r\n  return (\r\n    <Page>\r\n      <div\r\n        css={css`\r\n          background-color: white;\r\n          padding: 15px 20px 20px 20px;\r\n          border-radius: 4px;\r\n          border: 1px solid ${gray6};\r\n          box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\r\n        `}\r\n      >\r\n        <div\r\n          css={css`\r\n            font-size: 19px;\r\n            font-weight: bold;\r\n            margin: 10px 0px 5px;\r\n          `}\r\n        >\r\n          {question === null ? '' : question.title}\r\n        </div>\r\n        {question !== null && (\r\n          <React.Fragment>\r\n            <p\r\n              css={css`\r\n                margin-top: 0px;\r\n                background-color: white;\r\n              `}\r\n            >\r\n              {question.content}\r\n            </p>\r\n            <div\r\n              css={css`\r\n                font-size: 12px;\r\n                font-style: italic;\r\n                color: ${gray3};\r\n              `}\r\n            >\r\n              {`Asked by NupiLerox ${question.userName} on\r\n  ${question.created.toLocaleDateString()} \r\n  ${question.created.toLocaleTimeString()}`}\r\n            </div>\r\n            <AnswerList data={question.answers} />\r\n            <form\r\n              onSubmit={handleSubmit(submitForm)}\r\n              css={css`\r\n                margin-top: 20px;\r\n              `}\r\n            >\r\n              <FieldSet disabled={isSubmitting || successfullySubmitted}>\r\n                <FieldContainer>\r\n                  <FieldLabel htmlFor=\"content\">Your Answer</FieldLabel>\r\n                  <FieldTextArea\r\n                    {...register('content', { required: true, minLength: 50 })}\r\n                    id=\"content\"\r\n                  ></FieldTextArea>\r\n                  {errors.content && errors.content.type === 'required' && (\r\n                    <FieldError>You must enter the answer</FieldError>\r\n                  )}\r\n                </FieldContainer>\r\n                <FormButtonContainer>\r\n                  <PrimaryButton type=\"submit\">\r\n                    Submit your answer\r\n                  </PrimaryButton>\r\n                </FormButtonContainer>\r\n                {successfullySubmitted && (\r\n                  <SubmissionSuccess>\r\n                    Your answer was successfully submitted\r\n                  </SubmissionSuccess>\r\n                )}\r\n              </FieldSet>\r\n            </form>\r\n          </React.Fragment>\r\n        )}\r\n      </div>\r\n    </Page>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}