{"ast":null,"code":"import { webAPIUrl } from './AppSettings';\nexport const http = async config => {\n  const request = new Request(`${webAPIUrl}${config.path}`, {\n    method: config.method || 'get',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: config.body ? JSON.stringify(config.body) : undefined\n  });\n  const response = await fetch(request);\n\n  if (response.ok) {\n    const body = await response.json();\n    return {\n      ok: response.ok,\n      body\n    };\n  } else {\n    logError(request, response);\n    return {\n      ok: response.ok\n    };\n  }\n};\n\nconst logError = async (request, response) => {\n  const contentType = response.headers.get('content-type');\n  let body;\n\n  if (contentType && contentType.indexOf('application/json') !== -1) {\n    body = await response.json();\n  } else {\n    body = await request.text();\n  }\n\n  console.error(`Error requesting ${request.method}${request.url}`, body);\n};","map":{"version":3,"sources":["C:/MyApps/reactQandA/clientApp/src/http.ts"],"names":["webAPIUrl","http","config","request","Request","path","method","headers","body","JSON","stringify","undefined","response","fetch","ok","json","logError","contentType","get","indexOf","text","console","error","url"],"mappings":"AAAA,SAASA,SAAT,QAA0B,eAA1B;AAcA,OAAO,MAAMC,IAAI,GAAG,MAClBC,MADkB,IAEc;AAChC,QAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAa,GAAEJ,SAAU,GAAEE,MAAM,CAACG,IAAK,EAAvC,EAA0C;AACxDC,IAAAA,MAAM,EAAEJ,MAAM,CAACI,MAAP,IAAiB,KAD+B;AAExDC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAF+C;AAGxDC,IAAAA,IAAI,EAAEN,MAAM,CAACM,IAAP,GAAcC,IAAI,CAACC,SAAL,CAAeR,MAAM,CAACM,IAAtB,CAAd,GAA4CG;AAHM,GAA1C,CAAhB;AAKA,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACV,OAAD,CAA5B;;AACA,MAAIS,QAAQ,CAACE,EAAb,EAAiB;AACf,UAAMN,IAAI,GAAG,MAAMI,QAAQ,CAACG,IAAT,EAAnB;AACA,WAAO;AAAED,MAAAA,EAAE,EAAEF,QAAQ,CAACE,EAAf;AAAmBN,MAAAA;AAAnB,KAAP;AACD,GAHD,MAGO;AACLQ,IAAAA,QAAQ,CAACb,OAAD,EAAUS,QAAV,CAAR;AACA,WAAO;AAAEE,MAAAA,EAAE,EAAEF,QAAQ,CAACE;AAAf,KAAP;AACD;AACF,CAhBM;;AAkBP,MAAME,QAAQ,GAAG,OAAOb,OAAP,EAAyBS,QAAzB,KAAgD;AAC/D,QAAMK,WAAW,GAAGL,QAAQ,CAACL,OAAT,CAAiBW,GAAjB,CAAqB,cAArB,CAApB;AACA,MAAIV,IAAJ;;AACA,MAAIS,WAAW,IAAIA,WAAW,CAACE,OAAZ,CAAoB,kBAApB,MAA4C,CAAC,CAAhE,EAAmE;AACjEX,IAAAA,IAAI,GAAG,MAAMI,QAAQ,CAACG,IAAT,EAAb;AACD,GAFD,MAEO;AACLP,IAAAA,IAAI,GAAG,MAAML,OAAO,CAACiB,IAAR,EAAb;AACD;;AACDC,EAAAA,OAAO,CAACC,KAAR,CAAe,oBAAmBnB,OAAO,CAACG,MAAO,GAAEH,OAAO,CAACoB,GAAI,EAA/D,EAAkEf,IAAlE;AACD,CATD","sourcesContent":["import { webAPIUrl } from './AppSettings';\r\n\r\nexport interface HttpRequest<REQB> {\r\n  path: string;\r\n  method?: string;\r\n  body?: REQB;\r\n  accesToken?: string;\r\n}\r\n\r\nexport interface HttpResponse<RESB> {\r\n  ok: boolean;\r\n  body?: RESB;\r\n}\r\n\r\nexport const http = async <RESB, REQB = undefined>(\r\n  config: HttpRequest<REQB>,\r\n): Promise<HttpResponse<RESB>> => {\r\n  const request = new Request(`${webAPIUrl}${config.path}`, {\r\n    method: config.method || 'get',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: config.body ? JSON.stringify(config.body) : undefined,\r\n  });\r\n  const response = await fetch(request);\r\n  if (response.ok) {\r\n    const body = await response.json();\r\n    return { ok: response.ok, body };\r\n  } else {\r\n    logError(request, response);\r\n    return { ok: response.ok };\r\n  }\r\n};\r\n\r\nconst logError = async (request: Request, response: Response) => {\r\n  const contentType = response.headers.get('content-type');\r\n  let body: any;\r\n  if (contentType && contentType.indexOf('application/json') !== -1) {\r\n    body = await response.json();\r\n  } else {\r\n    body = await request.text();\r\n  }\r\n  console.error(`Error requesting ${request.method}${request.url}`, body);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}