{"ast":null,"code":"import { webAPIUrl } from './AppSettings';\nexport const http = async config => {\n  const request = new Request(`${webAPIUrl}${config.path}`);\n  const response = await fetch(request);\n\n  if (response.ok) {\n    const body = await response.json();\n    return {\n      ok: response.ok,\n      body\n    };\n  } else {\n    logError(request, response);\n    return {\n      ok: response.ok\n    };\n  }\n};\n\nconst logError = async (request, response) => {\n  const contentType = response.headers.get('content-type');\n  let body;\n\n  if (contentType && contentType.indexOf('application/json') !== -1) {\n    body = await response.json();\n  } else {\n    body = await request.text();\n  }\n\n  console.error(`Error requesting ${request.method}${request.url}`, body);\n};","map":{"version":3,"sources":["C:/MyApps/reactQandA/clientApp/src/http.ts"],"names":["webAPIUrl","http","config","request","Request","path","response","fetch","ok","body","json","logError","contentType","headers","get","indexOf","text","console","error","method","url"],"mappings":"AAAA,SAASA,SAAT,QAA0B,eAA1B;AAWA,OAAO,MAAMC,IAAI,GAAG,MAClBC,MADkB,IAEc;AAChC,QAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAa,GAAEJ,SAAU,GAAEE,MAAM,CAACG,IAAK,EAAvC,CAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,OAAD,CAA5B;;AACA,MAAIG,QAAQ,CAACE,EAAb,EAAiB;AACf,UAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB;AACA,WAAO;AAAEF,MAAAA,EAAE,EAAEF,QAAQ,CAACE,EAAf;AAAmBC,MAAAA;AAAnB,KAAP;AACD,GAHD,MAGO;AACLE,IAAAA,QAAQ,CAACR,OAAD,EAAUG,QAAV,CAAR;AACA,WAAO;AAAEE,MAAAA,EAAE,EAAEF,QAAQ,CAACE;AAAf,KAAP;AACD;AACF,CAZM;;AAcP,MAAMG,QAAQ,GAAG,OAAOR,OAAP,EAAyBG,QAAzB,KAAgD;AAC/D,QAAMM,WAAW,GAAGN,QAAQ,CAACO,OAAT,CAAiBC,GAAjB,CAAqB,cAArB,CAApB;AACA,MAAIL,IAAJ;;AACA,MAAIG,WAAW,IAAIA,WAAW,CAACG,OAAZ,CAAoB,kBAApB,MAA4C,CAAC,CAAhE,EAAmE;AACjEN,IAAAA,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAb;AACD,GAFD,MAEO;AACLD,IAAAA,IAAI,GAAG,MAAMN,OAAO,CAACa,IAAR,EAAb;AACD;;AACDC,EAAAA,OAAO,CAACC,KAAR,CAAe,oBAAmBf,OAAO,CAACgB,MAAO,GAAEhB,OAAO,CAACiB,GAAI,EAA/D,EAAkEX,IAAlE;AACD,CATD","sourcesContent":["import { webAPIUrl } from './AppSettings';\r\n\r\nexport interface HttpRequest<REQB> {\r\n  path: string;\r\n}\r\n\r\nexport interface HttpResponse<RESB> {\r\n  ok: boolean;\r\n  body?: RESB;\r\n}\r\n\r\nexport const http = async <RESB, REQB = undefined>(\r\n  config: HttpRequest<REQB>,\r\n): Promise<HttpResponse<RESB>> => {\r\n  const request = new Request(`${webAPIUrl}${config.path}`);\r\n  const response = await fetch(request);\r\n  if (response.ok) {\r\n    const body = await response.json();\r\n    return { ok: response.ok, body };\r\n  } else {\r\n    logError(request, response);\r\n    return { ok: response.ok };\r\n  }\r\n};\r\n\r\nconst logError = async (request: Request, response: Response) => {\r\n  const contentType = response.headers.get('content-type');\r\n  let body: any;\r\n  if (contentType && contentType.indexOf('application/json') !== -1) {\r\n    body = await response.json();\r\n  } else {\r\n    body = await request.text();\r\n  }\r\n  console.error(`Error requesting ${request.method}${request.url}`, body);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}