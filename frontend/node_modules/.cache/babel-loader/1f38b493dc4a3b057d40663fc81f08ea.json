{"ast":null,"code":"import { http } from './http';\nimport { getAccessToken } from './Auth';\nexport const mapQuestionFromServer = question => ({ ...question,\n  created: new Date(question.created),\n  answers: question.answers ? question.answers.map(answer => ({ ...answer,\n    created: new Date(answer.created)\n  })) : []\n});\nconst questions = [{\n  questionId: 1,\n  title: 'Why should I learn TypeScript?',\n  content: 'TypeScript seems to be getting popular so I wondered whether it is worth my time learning it? What benefits does it give over JavaScript?',\n  userName: 'Bob',\n  created: new Date(),\n  answers: [{\n    answerId: 1,\n    content: 'To catch problems earlier speeding up your developments',\n    userName: 'Jane',\n    created: new Date()\n  }, {\n    answerId: 2,\n    content: 'So, that you can use the JavaScript features of tomorrow, today',\n    userName: 'Fred',\n    created: new Date()\n  }]\n}, {\n  questionId: 2,\n  title: 'Which state management tool should I use?',\n  content: 'There seem to be a fair few state management tools around for React - React, Unstated, ... Which one should I use?',\n  userName: 'Bob',\n  created: new Date(),\n  answers: []\n}];\nexport const getUnansweredQuestions = async () => {\n  const result = await http({\n    path: '/questions/unanswered'\n  });\n\n  if (result.ok && result.body) {\n    return result.body.map(mapQuestionFromServer);\n  } else {\n    return [];\n  }\n};\n\nconst wait = async ms => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n\nexport const getQuestion = async questionId => {\n  const result = await http({\n    path: `/questions/${questionId}`\n  });\n\n  if (result.ok && result.body) {\n    return mapQuestionFromServer(result.body);\n  } else {\n    return null;\n  }\n};\nexport const searchQuestions = async criteria => {\n  const result = await http({\n    path: `/questions?search=${criteria}`\n  });\n\n  if (result.ok && result.body) {\n    return result.body.map(mapQuestionFromServer);\n  } else {\n    return [];\n  }\n};\nexport const postQuestion = async question => {\n  const accesToken = await getAccessToken();\n  const result = await http({\n    path: '/questions',\n    method: 'post',\n    body: question,\n    accesToken\n  });\n\n  if (result.ok && result.body) {\n    return mapQuestionFromServer(result.body);\n  }\n};\nexport const postAnswer = async answer => {\n  await wait(500);\n  const question = questions.filter(q => q.questionId === answer.questionId)[0];\n  const answerInQuestion = {\n    answerId: 99,\n    ...answer\n  };\n  question.answers.push(answerInQuestion);\n  return answerInQuestion;\n};","map":{"version":3,"sources":["C:/MyApps/reactQandA/clientApp/src/QuestionData.ts"],"names":["http","getAccessToken","mapQuestionFromServer","question","created","Date","answers","map","answer","questions","questionId","title","content","userName","answerId","getUnansweredQuestions","result","path","ok","body","wait","ms","Promise","resolve","setTimeout","getQuestion","searchQuestions","criteria","postQuestion","accesToken","method","postAnswer","filter","q","answerInQuestion","push"],"mappings":"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","sourcesContent":["import { http } from './http';\r\nimport { getAccessToken } from './Auth';\r\n\r\nexport interface QuestionData {\r\n  questionId: number;\r\n  title: string;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n  answers: AnswerData[];\r\n}\r\n\r\nexport interface QuestionDataFromServer {\r\n  questionId: number;\r\n  title: string;\r\n  content: string;\r\n  userName: string;\r\n  created: string;\r\n  answers: Array<{\r\n    answerId: number;\r\n    content: string;\r\n    userName: string;\r\n    created: string;\r\n  }>;\r\n}\r\n\r\nexport interface AnswerData {\r\n  answerId: number;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\n\r\nexport const mapQuestionFromServer = (\r\n  question: QuestionDataFromServer,\r\n): QuestionData => ({\r\n  ...question,\r\n  created: new Date(question.created),\r\n  answers: question.answers\r\n    ? question.answers.map((answer) => ({\r\n        ...answer,\r\n        created: new Date(answer.created),\r\n      }))\r\n    : [],\r\n});\r\n\r\nconst questions: QuestionData[] = [\r\n  {\r\n    questionId: 1,\r\n    title: 'Why should I learn TypeScript?',\r\n    content:\r\n      'TypeScript seems to be getting popular so I wondered whether it is worth my time learning it? What benefits does it give over JavaScript?',\r\n    userName: 'Bob',\r\n    created: new Date(),\r\n    answers: [\r\n      {\r\n        answerId: 1,\r\n        content: 'To catch problems earlier speeding up your developments',\r\n        userName: 'Jane',\r\n        created: new Date(),\r\n      },\r\n      {\r\n        answerId: 2,\r\n        content:\r\n          'So, that you can use the JavaScript features of tomorrow, today',\r\n        userName: 'Fred',\r\n        created: new Date(),\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    questionId: 2,\r\n    title: 'Which state management tool should I use?',\r\n    content:\r\n      'There seem to be a fair few state management tools around for React - React, Unstated, ... Which one should I use?',\r\n    userName: 'Bob',\r\n    created: new Date(),\r\n    answers: [],\r\n  },\r\n];\r\n\r\nexport const getUnansweredQuestions = async (): Promise<QuestionData[]> => {\r\n  const result = await http<QuestionDataFromServer[]>({\r\n    path: '/questions/unanswered',\r\n  });\r\n  if (result.ok && result.body) {\r\n    return result.body.map(mapQuestionFromServer);\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\nconst wait = async (ms: number): Promise<void> => {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n};\r\n\r\nexport const getQuestion = async (\r\n  questionId: number,\r\n): Promise<QuestionData | null> => {\r\n  const result = await http<QuestionDataFromServer>({\r\n    path: `/questions/${questionId}`,\r\n  });\r\n  if (result.ok && result.body) {\r\n    return mapQuestionFromServer(result.body);\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const searchQuestions = async (\r\n  criteria: string,\r\n): Promise<QuestionData[]> => {\r\n  const result = await http<QuestionDataFromServer[]>({\r\n    path: `/questions?search=${criteria}`,\r\n  });\r\n  if (result.ok && result.body) {\r\n    return result.body.map(mapQuestionFromServer);\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\nexport interface PostQuestionData {\r\n  title: string;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\n\r\nexport const postQuestion = async (\r\n  question: PostQuestionData,\r\n): Promise<QuestionData | undefined> => {\r\n  const accesToken = await getAccessToken();\r\n  const result = await http<QuestionDataFromServer, PostQuestionData>({\r\n    path: '/questions',\r\n    method: 'post',\r\n    body: question,\r\n    accesToken,\r\n  });\r\n  if (result.ok && result.body) {\r\n    return mapQuestionFromServer(result.body);\r\n  }\r\n};\r\n\r\nexport interface PostAnswerData {\r\n  questionId: number;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\n\r\nexport const postAnswer = async (\r\n  answer: PostAnswerData,\r\n): Promise<AnswerData | undefined> => {\r\n  await wait(500);\r\n  const question = questions.filter(\r\n    (q) => q.questionId === answer.questionId,\r\n  )[0];\r\n  const answerInQuestion: AnswerData = {\r\n    answerId: 99,\r\n    ...answer,\r\n  };\r\n  question.answers.push(answerInQuestion);\r\n  return answerInQuestion;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}