{"ast":null,"code":"import _regeneratorRuntime from\"C:/MyApps/reactQandA/clientApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/MyApps/reactQandA/clientApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{webAPIUrl}from'./AppSettings';export var http=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(config){var request,response,body;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:request=new Request(\"\".concat(webAPIUrl).concat(config.path),{method:config.method||'get',headers:{'Content-Type':'application/json'},body:config.body?JSON.stringify(config.body):undefined});if(config.accesToken){request.headers.set('authorization',\"bearer \".concat(config.accesToken));}_context.next=4;return fetch(request);case 4:response=_context.sent;if(!response.ok){_context.next=12;break;}_context.next=8;return response.json();case 8:body=_context.sent;return _context.abrupt(\"return\",{ok:response.ok,body:body});case 12:logError(request,response);return _context.abrupt(\"return\",{ok:response.ok});case 14:case\"end\":return _context.stop();}}},_callee);}));return function http(_x){return _ref.apply(this,arguments);};}();var logError=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(request,response){var contentType,body;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:contentType=response.headers.get('content-type');if(!(contentType&&contentType.indexOf('application/json')!==-1)){_context2.next=7;break;}_context2.next=4;return response.json();case 4:body=_context2.sent;_context2.next=10;break;case 7:_context2.next=9;return request.text();case 9:body=_context2.sent;case 10:console.error(\"Error requesting \".concat(request.method).concat(request.url),body);case 11:case\"end\":return _context2.stop();}}},_callee2);}));return function logError(_x2,_x3){return _ref2.apply(this,arguments);};}();","map":{"version":3,"sources":["C:/MyApps/reactQandA/clientApp/src/http.ts"],"names":["webAPIUrl","http","config","request","Request","path","method","headers","body","JSON","stringify","undefined","accesToken","set","fetch","response","ok","json","logError","contentType","get","indexOf","text","console","error","url"],"mappings":"uSACA,OAASA,SAAT,KAA0B,eAA1B,CAcA,MAAO,IAAMC,CAAAA,IAAI,0FAAG,iBAClBC,MADkB,4IAGZC,OAHY,CAGF,GAAIC,CAAAA,OAAJ,WAAeJ,SAAf,SAA2BE,MAAM,CAACG,IAAlC,EAA0C,CACxDC,MAAM,CAAEJ,MAAM,CAACI,MAAP,EAAiB,KAD+B,CAExDC,OAAO,CAAE,CAAE,eAAgB,kBAAlB,CAF+C,CAGxDC,IAAI,CAAEN,MAAM,CAACM,IAAP,CAAcC,IAAI,CAACC,SAAL,CAAeR,MAAM,CAACM,IAAtB,CAAd,CAA4CG,SAHM,CAA1C,CAHE,CAQlB,GAAIT,MAAM,CAACU,UAAX,CAAuB,CACrBT,OAAO,CAACI,OAAR,CAAgBM,GAAhB,CAAoB,eAApB,kBAA+CX,MAAM,CAACU,UAAtD,GACD,CAViB,sBAWKE,CAAAA,KAAK,CAACX,OAAD,CAXV,QAWZY,QAXY,mBAYdA,QAAQ,CAACC,EAZK,gDAaGD,CAAAA,QAAQ,CAACE,IAAT,EAbH,QAaVT,IAbU,+CAcT,CAAEQ,EAAE,CAAED,QAAQ,CAACC,EAAf,CAAmBR,IAAI,CAAJA,IAAnB,CAdS,UAgBhBU,QAAQ,CAACf,OAAD,CAAUY,QAAV,CAAR,CAhBgB,gCAiBT,CAAEC,EAAE,CAAED,QAAQ,CAACC,EAAf,CAjBS,yDAAH,kBAAJf,CAAAA,IAAI,4CAAV,CAqBP,GAAMiB,CAAAA,QAAQ,2FAAG,kBAAOf,OAAP,CAAyBY,QAAzB,2IACTI,WADS,CACKJ,QAAQ,CAACR,OAAT,CAAiBa,GAAjB,CAAqB,cAArB,CADL,MAGXD,WAAW,EAAIA,WAAW,CAACE,OAAZ,CAAoB,kBAApB,IAA4C,CAAC,CAHjD,kDAIAN,CAAAA,QAAQ,CAACE,IAAT,EAJA,QAIbT,IAJa,sEAMAL,CAAAA,OAAO,CAACmB,IAAR,EANA,QAMbd,IANa,wBAQfe,OAAO,CAACC,KAAR,4BAAkCrB,OAAO,CAACG,MAA1C,SAAmDH,OAAO,CAACsB,GAA3D,EAAkEjB,IAAlE,EARe,yDAAH,kBAARU,CAAAA,QAAQ,kDAAd","sourcesContent":["import { isGetAccessor } from 'typescript';\r\nimport { webAPIUrl } from './AppSettings';\r\n\r\nexport interface HttpRequest<REQB> {\r\n  path: string;\r\n  method?: string;\r\n  body?: REQB;\r\n  accesToken?: string;\r\n}\r\n\r\nexport interface HttpResponse<RESB> {\r\n  ok: boolean;\r\n  body?: RESB;\r\n}\r\n\r\nexport const http = async <RESB, REQB = undefined>(\r\n  config: HttpRequest<REQB>,\r\n): Promise<HttpResponse<RESB>> => {\r\n  const request = new Request(`${webAPIUrl}${config.path}`, {\r\n    method: config.method || 'get',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: config.body ? JSON.stringify(config.body) : undefined,\r\n  });\r\n  if (config.accesToken) {\r\n    request.headers.set('authorization', `bearer ${config.accesToken}`);\r\n  }\r\n  const response = await fetch(request);\r\n  if (response.ok) {\r\n    const body = await response.json();\r\n    return { ok: response.ok, body };\r\n  } else {\r\n    logError(request, response);\r\n    return { ok: response.ok };\r\n  }\r\n};\r\n\r\nconst logError = async (request: Request, response: Response) => {\r\n  const contentType = response.headers.get('content-type');\r\n  let body: any;\r\n  if (contentType && contentType.indexOf('application/json') !== -1) {\r\n    body = await response.json();\r\n  } else {\r\n    body = await request.text();\r\n  }\r\n  console.error(`Error requesting ${request.method}${request.url}`, body);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}