{"ast":null,"code":"var _jsxFileName = \"C:\\\\MyApps\\\\reactQandA\\\\clientApp\\\\src\\\\SearchPage.tsx\",\n    _s = $RefreshSig$();\n\n/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Page } from './Page';\nimport { useSearchParams } from 'react-router-dom';\nimport { QuestionList } from './QuestionList';\nimport { searchQuestions } from './QuestionData';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\nexport const SearchPage = () => {\n  _s();\n\n  const [searchParams] = useSearchParams();\n  const [questions, setQuestions] = React.useState([]);\n  const search = searchParams.get('criteria') || '';\n  React.useEffect(() => {\n    let cancelled = false;\n\n    const doSearch = async criteria => {\n      const foundResults = await searchQuestions(criteria);\n\n      if (!cancelled) {\n        setQuestions(foundResults);\n      }\n    };\n\n    doSearch(search);\n    return () => {\n      cancelled = true;\n    }; //eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [search]);\n  return _jsxDEV(Page, {\n    title: \"Search results\",\n    children: [search && _jsxDEV(\"p\", {\n      css: css`\n            font-size: 16px;\n            font-style: italic;\n            margin-top: 0px;\n          `,\n      children: [' ', \"for \\\"\", search, \"\\\"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this), _jsxDEV(QuestionList, {\n      data: questions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchPage, \"aI2Erbi7pP9WZlvNWuxSqPbGLOM=\", false, function () {\n  return [useSearchParams];\n});\n\n_c = SearchPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchPage\");","map":{"version":3,"sources":["C:/MyApps/reactQandA/clientApp/src/SearchPage.tsx"],"names":["css","Page","useSearchParams","QuestionList","searchQuestions","React","SearchPage","searchParams","questions","setQuestions","useState","search","get","useEffect","cancelled","doSearch","criteria","foundResults"],"mappings":";;;AAAA;AACA,SAASA,GAAT,QAAoB,gBAApB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAAuBC,eAAvB,QAA8C,gBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAC9B,QAAM,CAACC,YAAD,IAAiBL,eAAe,EAAtC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BJ,KAAK,CAACK,QAAN,CAA+B,EAA/B,CAAlC;AACA,QAAMC,MAAM,GAAGJ,YAAY,CAACK,GAAb,CAAiB,UAAjB,KAAgC,EAA/C;AAEAP,EAAAA,KAAK,CAACQ,SAAN,CAAgB,MAAM;AACpB,QAAIC,SAAS,GAAG,KAAhB;;AACA,UAAMC,QAAQ,GAAG,MAAOC,QAAP,IAA4B;AAC3C,YAAMC,YAAY,GAAG,MAAMb,eAAe,CAACY,QAAD,CAA1C;;AACA,UAAI,CAACF,SAAL,EAAgB;AACdL,QAAAA,YAAY,CAACQ,YAAD,CAAZ;AACD;AACF,KALD;;AAMAF,IAAAA,QAAQ,CAACJ,MAAD,CAAR;AACA,WAAO,MAAM;AACXG,MAAAA,SAAS,GAAG,IAAZ;AACD,KAFD,CAToB,CAYpB;AACD,GAbD,EAaG,CAACH,MAAD,CAbH;AAeA,SACE,QAAC,IAAD;AAAM,IAAA,KAAK,EAAC,gBAAZ;AAAA,eACGA,MAAM,IACL;AACE,MAAA,GAAG,EAAEX,GAAI;AACnB;AACA;AACA;AACA,WALQ;AAAA,iBAOG,GAPH,YAQQW,MARR;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,EAaE,QAAC,YAAD;AAAc,MAAA,IAAI,EAAEH;AAApB;AAAA;AAAA;AAAA;AAAA,YAbF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CArCM;;GAAMF,U;UACYJ,e;;;KADZI,U","sourcesContent":["/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport { Page } from './Page';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { QuestionList } from './QuestionList';\r\nimport { QuestionData, searchQuestions } from './QuestionData';\r\nimport React from 'react';\r\n\r\nexport const SearchPage = () => {\r\n  const [searchParams] = useSearchParams();\r\n  const [questions, setQuestions] = React.useState<QuestionData[]>([]);\r\n  const search = searchParams.get('criteria') || '';\r\n\r\n  React.useEffect(() => {\r\n    let cancelled = false;\r\n    const doSearch = async (criteria: string) => {\r\n      const foundResults = await searchQuestions(criteria);\r\n      if (!cancelled) {\r\n        setQuestions(foundResults);\r\n      }\r\n    };\r\n    doSearch(search);\r\n    return () => {\r\n      cancelled = true;\r\n    };\r\n    //eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [search]);\r\n\r\n  return (\r\n    <Page title=\"Search results\">\r\n      {search && (\r\n        <p\r\n          css={css`\r\n            font-size: 16px;\r\n            font-style: italic;\r\n            margin-top: 0px;\r\n          `}\r\n        >\r\n          {' '}\r\n          for \"{search}\"\r\n        </p>\r\n      )}\r\n      <QuestionList data={questions}></QuestionList>\r\n    </Page>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}