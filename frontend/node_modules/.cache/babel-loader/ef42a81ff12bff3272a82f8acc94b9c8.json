{"ast":null,"code":"import { createStore, combineReducers } from 'redux';\nconst initialQuestionState = {\n  loading: false,\n  unanswered: [],\n  viewing: null,\n  searched: []\n};\nexport const GETTINGUNANSWEREDQUESTIONS = 'GettingUnansweredeQuestions';\nexport const gettingUnansweredQuestionsAction = () => ({\n  type: GETTINGUNANSWEREDQUESTIONS\n});\nexport const GOTUNANSWEREDQUESTIONS = 'GotUnansweredQuestions';\nexport const gotUnansweredQuestionsAction = questions => ({\n  type: GOTUNANSWEREDQUESTIONS,\n  questions: questions\n});\nexport const GETTINGQUESTIONS = 'GettingQuestion';\nexport const gettingQuestionAction = () => ({\n  type: GETTINGQUESTIONS\n});\nexport const GOTQUESTION = 'GotQuestion';\nexport const gotQuestionAction = question => ({\n  type: GOTQUESTION,\n  question: question\n});\nexport const SEARCHINGQUESTIONS = 'SearchingQuestions';\nexport const searchingQuestionsAction = () => ({\n  type: SEARCHINGQUESTIONS\n});\nexport const SEARCHEDQUESTIONS = 'SearchedQuestions';\nexport const searchedQuestionsAction = questions => ({\n  type: SEARCHEDQUESTIONS,\n  questions\n});\n\nconst questionsReducer = (state = initialQuestionState, action) => {\n  switch (action.type) {\n    case GETTINGUNANSWEREDQUESTIONS:\n      {\n        return { ...state,\n          loading: true\n        };\n      }\n\n    case GOTUNANSWEREDQUESTIONS:\n      {\n        return { ...state,\n          unanswered: action.questions,\n          loading: false\n        };\n      }\n\n    case GETTINGQUESTIONS:\n      {\n        return { ...state,\n          viewing: null,\n          loading: true\n        };\n      }\n\n    case GOTQUESTION:\n      {\n        return { ...state,\n          viewing: action.question,\n          loading: false\n        };\n      }\n\n    case SEARCHINGQUESTIONS:\n      {\n        return { ...state,\n          searched: [],\n          loading: true\n        };\n      }\n\n    case SEARCHEDQUESTIONS:\n      {\n        return { ...state,\n          searched: action.questions,\n          loading: false\n        };\n      }\n  }\n\n  return state;\n};\n\nconst rootReducer = combineReducers({\n  questions: questionsReducer\n});\nexport function configureStore() {\n  const store = createStore(rootReducer, undefined);\n  return store;\n}","map":{"version":3,"sources":["C:/MyApps/reactQandA/clientApp/src/Store.ts"],"names":["createStore","combineReducers","initialQuestionState","loading","unanswered","viewing","searched","GETTINGUNANSWEREDQUESTIONS","gettingUnansweredQuestionsAction","type","GOTUNANSWEREDQUESTIONS","gotUnansweredQuestionsAction","questions","GETTINGQUESTIONS","gettingQuestionAction","GOTQUESTION","gotQuestionAction","question","SEARCHINGQUESTIONS","searchingQuestionsAction","SEARCHEDQUESTIONS","searchedQuestionsAction","questionsReducer","state","action","rootReducer","configureStore","store","undefined"],"mappings":"AACA,SAAgBA,WAAhB,EAA6BC,eAA7B,QAAoD,OAApD;AAcA,MAAMC,oBAAoC,GAAG;AAC3CC,EAAAA,OAAO,EAAE,KADkC;AAE3CC,EAAAA,UAAU,EAAE,EAF+B;AAG3CC,EAAAA,OAAO,EAAE,IAHkC;AAI3CC,EAAAA,QAAQ,EAAE;AAJiC,CAA7C;AAOA,OAAO,MAAMC,0BAA0B,GAAG,6BAAnC;AAEP,OAAO,MAAMC,gCAAgC,GAAG,OAC7C;AAAEC,EAAAA,IAAI,EAAEF;AAAR,CAD6C,CAAzC;AAGP,OAAO,MAAMG,sBAAsB,GAAG,wBAA/B;AAEP,OAAO,MAAMC,4BAA4B,GAAIC,SAAD,KACzC;AAAEH,EAAAA,IAAI,EAAEC,sBAAR;AAAgCE,EAAAA,SAAS,EAAEA;AAA3C,CADyC,CAArC;AAGP,OAAO,MAAMC,gBAAgB,GAAG,iBAAzB;AAEP,OAAO,MAAMC,qBAAqB,GAAG,OAClC;AAAEL,EAAAA,IAAI,EAAEI;AAAR,CADkC,CAA9B;AAGP,OAAO,MAAME,WAAW,GAAG,aAApB;AAEP,OAAO,MAAMC,iBAAiB,GAAIC,QAAD,KAC9B;AAAER,EAAAA,IAAI,EAAEM,WAAR;AAAqBE,EAAAA,QAAQ,EAAEA;AAA/B,CAD8B,CAA1B;AAGP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AAEP,OAAO,MAAMC,wBAAwB,GAAG,OACrC;AAAEV,EAAAA,IAAI,EAAES;AAAR,CADqC,CAAjC;AAGP,OAAO,MAAME,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,MAAMC,uBAAuB,GAAIT,SAAD,KACpC;AAAEH,EAAAA,IAAI,EAAEW,iBAAR;AAA2BR,EAAAA;AAA3B,CADoC,CAAhC;;AAWP,MAAMU,gBAAgB,GAAG,CACvBC,KAAK,GAAGrB,oBADe,EAEvBsB,MAFuB,KAGpB;AACH,UAAQA,MAAM,CAACf,IAAf;AACE,SAAKF,0BAAL;AAAiC;AAC/B,eAAO,EAAE,GAAGgB,KAAL;AAAYpB,UAAAA,OAAO,EAAE;AAArB,SAAP;AACD;;AACD,SAAKO,sBAAL;AAA6B;AAC3B,eAAO,EAAE,GAAGa,KAAL;AAAYnB,UAAAA,UAAU,EAAEoB,MAAM,CAACZ,SAA/B;AAA0CT,UAAAA,OAAO,EAAE;AAAnD,SAAP;AACD;;AACD,SAAKU,gBAAL;AAAuB;AACrB,eAAO,EAAE,GAAGU,KAAL;AAAYlB,UAAAA,OAAO,EAAE,IAArB;AAA2BF,UAAAA,OAAO,EAAE;AAApC,SAAP;AACD;;AACD,SAAKY,WAAL;AAAkB;AAChB,eAAO,EAAE,GAAGQ,KAAL;AAAYlB,UAAAA,OAAO,EAAEmB,MAAM,CAACP,QAA5B;AAAsCd,UAAAA,OAAO,EAAE;AAA/C,SAAP;AACD;;AACD,SAAKe,kBAAL;AAAyB;AACvB,eAAO,EAAE,GAAGK,KAAL;AAAYjB,UAAAA,QAAQ,EAAE,EAAtB;AAA0BH,UAAAA,OAAO,EAAE;AAAnC,SAAP;AACD;;AACD,SAAKiB,iBAAL;AAAwB;AACtB,eAAO,EAAE,GAAGG,KAAL;AAAYjB,UAAAA,QAAQ,EAAEkB,MAAM,CAACZ,SAA7B;AAAwCT,UAAAA,OAAO,EAAE;AAAjD,SAAP;AACD;AAlBH;;AAoBA,SAAOoB,KAAP;AACD,CAzBD;;AA2BA,MAAME,WAAW,GAAGxB,eAAe,CAAW;AAAEW,EAAAA,SAAS,EAAEU;AAAb,CAAX,CAAnC;AAEA,OAAO,SAASI,cAAT,GAA2C;AAChD,QAAMC,KAAK,GAAG3B,WAAW,CAACyB,WAAD,EAAcG,SAAd,CAAzB;AACA,SAAOD,KAAP;AACD","sourcesContent":["import { QuestionData } from './QuestionData';\r\nimport { Store, createStore, combineReducers } from 'redux';\r\nimport { create } from 'domain';\r\n\r\ninterface QuestionsState {\r\n  readonly loading: boolean;\r\n  readonly unanswered: QuestionData[];\r\n  readonly viewing: QuestionData | null;\r\n  readonly searched: QuestionData[];\r\n}\r\n\r\nexport interface AppState {\r\n  readonly questions: QuestionsState;\r\n}\r\n\r\nconst initialQuestionState: QuestionsState = {\r\n  loading: false,\r\n  unanswered: [],\r\n  viewing: null,\r\n  searched: [],\r\n};\r\n\r\nexport const GETTINGUNANSWEREDQUESTIONS = 'GettingUnansweredeQuestions';\r\n\r\nexport const gettingUnansweredQuestionsAction = () =>\r\n  ({ type: GETTINGUNANSWEREDQUESTIONS } as const);\r\n\r\nexport const GOTUNANSWEREDQUESTIONS = 'GotUnansweredQuestions';\r\n\r\nexport const gotUnansweredQuestionsAction = (questions: QuestionData[]) =>\r\n  ({ type: GOTUNANSWEREDQUESTIONS, questions: questions } as const);\r\n\r\nexport const GETTINGQUESTIONS = 'GettingQuestion';\r\n\r\nexport const gettingQuestionAction = () =>\r\n  ({ type: GETTINGQUESTIONS } as const);\r\n\r\nexport const GOTQUESTION = 'GotQuestion';\r\n\r\nexport const gotQuestionAction = (question: QuestionData | null) =>\r\n  ({ type: GOTQUESTION, question: question } as const);\r\n\r\nexport const SEARCHINGQUESTIONS = 'SearchingQuestions';\r\n\r\nexport const searchingQuestionsAction = () =>\r\n  ({ type: SEARCHINGQUESTIONS } as const);\r\n\r\nexport const SEARCHEDQUESTIONS = 'SearchedQuestions';\r\n\r\nexport const searchedQuestionsAction = (questions: QuestionData[]) =>\r\n  ({ type: SEARCHEDQUESTIONS, questions } as const);\r\n\r\ntype QuestionsActions =\r\n  | ReturnType<typeof gettingUnansweredQuestionsAction>\r\n  | ReturnType<typeof gotUnansweredQuestionsAction>\r\n  | ReturnType<typeof gettingQuestionAction>\r\n  | ReturnType<typeof gotQuestionAction>\r\n  | ReturnType<typeof searchingQuestionsAction>\r\n  | ReturnType<typeof searchedQuestionsAction>;\r\n\r\nconst questionsReducer = (\r\n  state = initialQuestionState,\r\n  action: QuestionsActions,\r\n) => {\r\n  switch (action.type) {\r\n    case GETTINGUNANSWEREDQUESTIONS: {\r\n      return { ...state, loading: true };\r\n    }\r\n    case GOTUNANSWEREDQUESTIONS: {\r\n      return { ...state, unanswered: action.questions, loading: false };\r\n    }\r\n    case GETTINGQUESTIONS: {\r\n      return { ...state, viewing: null, loading: true };\r\n    }\r\n    case GOTQUESTION: {\r\n      return { ...state, viewing: action.question, loading: false };\r\n    }\r\n    case SEARCHINGQUESTIONS: {\r\n      return { ...state, searched: [], loading: true };\r\n    }\r\n    case SEARCHEDQUESTIONS: {\r\n      return { ...state, searched: action.questions, loading: false };\r\n    }\r\n  }\r\n  return state;\r\n};\r\n\r\nconst rootReducer = combineReducers<AppState>({ questions: questionsReducer });\r\n\r\nexport function configureStore(): Store<AppState> {\r\n  const store = createStore(rootReducer, undefined);\r\n  return store;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}