{"ast":null,"code":"import { http } from './http';\nimport { getAccessToken } from './Auth';\nexport const mapQuestionFromServer = question => ({ ...question,\n  created: new Date(question.created),\n  answers: question.answers ? question.answers.map(answer => ({ ...answer,\n    created: new Date(answer.created)\n  })) : []\n});\nexport const getUnansweredQuestions = async () => {\n  const result = await http({\n    path: '/questions/unanswered'\n  });\n\n  if (result.ok && result.body) {\n    return result.body.map(mapQuestionFromServer);\n  } else {\n    return [];\n  }\n};\nexport const getQuestion = async questionId => {\n  const result = await http({\n    path: `/questions/${questionId}`\n  });\n\n  if (result.ok && result.body) {\n    return mapQuestionFromServer(result.body);\n  } else {\n    return null;\n  }\n};\nexport const searchQuestions = async criteria => {\n  const result = await http({\n    path: `/questions?search=${criteria}`\n  });\n\n  if (result.ok && result.body) {\n    return result.body.map(mapQuestionFromServer);\n  } else {\n    return [];\n  }\n};\nexport const postQuestion = async question => {\n  const accesToken = await getAccessToken();\n  const result = await http({\n    path: '/questions',\n    method: 'post',\n    body: question,\n    accesToken\n  });\n\n  if (result.ok && result.body) {\n    return mapQuestionFromServer(result.body);\n  } else {\n    return undefined;\n  }\n};\nexport const postAnswer = async answer => {\n  const accesToken = await getAccessToken();\n  const result = await http({\n    path: '/questions/answer',\n    method: 'post',\n    body: answer,\n    accesToken\n  });\n\n  if (result.ok) {\n    return result.body;\n  } else {\n    return undefined;\n  }\n};","map":{"version":3,"sources":["C:/MyApps/reactQandA/clientApp/src/QuestionData.ts"],"names":["http","getAccessToken","mapQuestionFromServer","question","created","Date","answers","map","answer","getUnansweredQuestions","result","path","ok","body","getQuestion","questionId","searchQuestions","criteria","postQuestion","accesToken","method","undefined","postAnswer"],"mappings":"AAAA,SAASA,IAAT,QAAqB,QAArB;AACA,SAASC,cAAT,QAA+B,QAA/B;AAqDA,OAAO,MAAMC,qBAAqB,GAChCC,QADmC,KAEjB,EAClB,GAAGA,QADe;AAElBC,EAAAA,OAAO,EAAE,IAAIC,IAAJ,CAASF,QAAQ,CAACC,OAAlB,CAFS;AAGlBE,EAAAA,OAAO,EAAEH,QAAQ,CAACG,OAAT,GACLH,QAAQ,CAACG,OAAT,CAAiBC,GAAjB,CAAsBC,MAAD,KAAa,EAChC,GAAGA,MAD6B;AAEhCJ,IAAAA,OAAO,EAAE,IAAIC,IAAJ,CAASG,MAAM,CAACJ,OAAhB;AAFuB,GAAb,CAArB,CADK,GAKL;AARc,CAFiB,CAA9B;AAaP,OAAO,MAAMK,sBAAsB,GAAG,YAAqC;AACzE,QAAMC,MAAM,GAAG,MAAMV,IAAI,CAA2B;AAClDW,IAAAA,IAAI,EAAE;AAD4C,GAA3B,CAAzB;;AAGA,MAAID,MAAM,CAACE,EAAP,IAAaF,MAAM,CAACG,IAAxB,EAA8B;AAC5B,WAAOH,MAAM,CAACG,IAAP,CAAYN,GAAZ,CAAgBL,qBAAhB,CAAP;AACD,GAFD,MAEO;AACL,WAAO,EAAP;AACD;AACF,CATM;AAWP,OAAO,MAAMY,WAAW,GAAG,MACzBC,UADyB,IAEQ;AACjC,QAAML,MAAM,GAAG,MAAMV,IAAI,CAAyB;AAChDW,IAAAA,IAAI,EAAG,cAAaI,UAAW;AADiB,GAAzB,CAAzB;;AAGA,MAAIL,MAAM,CAACE,EAAP,IAAaF,MAAM,CAACG,IAAxB,EAA8B;AAC5B,WAAOX,qBAAqB,CAACQ,MAAM,CAACG,IAAR,CAA5B;AACD,GAFD,MAEO;AACL,WAAO,IAAP;AACD;AACF,CAXM;AAaP,OAAO,MAAMG,eAAe,GAAG,MAC7BC,QAD6B,IAED;AAC5B,QAAMP,MAAM,GAAG,MAAMV,IAAI,CAA2B;AAClDW,IAAAA,IAAI,EAAG,qBAAoBM,QAAS;AADc,GAA3B,CAAzB;;AAGA,MAAIP,MAAM,CAACE,EAAP,IAAaF,MAAM,CAACG,IAAxB,EAA8B;AAC5B,WAAOH,MAAM,CAACG,IAAP,CAAYN,GAAZ,CAAgBL,qBAAhB,CAAP;AACD,GAFD,MAEO;AACL,WAAO,EAAP;AACD;AACF,CAXM;AAaP,OAAO,MAAMgB,YAAY,GAAG,MAC1Bf,QAD0B,IAEY;AACtC,QAAMgB,UAAU,GAAG,MAAMlB,cAAc,EAAvC;AACA,QAAMS,MAAM,GAAG,MAAMV,IAAI,CAA2C;AAClEW,IAAAA,IAAI,EAAE,YAD4D;AAElES,IAAAA,MAAM,EAAE,MAF0D;AAGlEP,IAAAA,IAAI,EAAEV,QAH4D;AAIlEgB,IAAAA;AAJkE,GAA3C,CAAzB;;AAMA,MAAIT,MAAM,CAACE,EAAP,IAAaF,MAAM,CAACG,IAAxB,EAA8B;AAC5B,WAAOX,qBAAqB,CAACQ,MAAM,CAACG,IAAR,CAA5B;AACD,GAFD,MAEO;AACL,WAAOQ,SAAP;AACD;AACF,CAfM;AAiBP,OAAO,MAAMC,UAAU,GAAG,MACxBd,MADwB,IAEY;AACpC,QAAMW,UAAU,GAAG,MAAMlB,cAAc,EAAvC;AACA,QAAMS,MAAM,GAAG,MAAMV,IAAI,CAA6B;AACpDW,IAAAA,IAAI,EAAE,mBAD8C;AAEpDS,IAAAA,MAAM,EAAE,MAF4C;AAGpDP,IAAAA,IAAI,EAAEL,MAH8C;AAIpDW,IAAAA;AAJoD,GAA7B,CAAzB;;AAMA,MAAIT,MAAM,CAACE,EAAX,EAAe;AACb,WAAOF,MAAM,CAACG,IAAd;AACD,GAFD,MAEO;AACL,WAAOQ,SAAP;AACD;AACF,CAfM","sourcesContent":["import { http } from './http';\r\nimport { getAccessToken } from './Auth';\r\n\r\nexport interface QuestionData {\r\n  questionId: number;\r\n  title: string;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n  answers: AnswerData[];\r\n}\r\n\r\nexport interface QuestionDataFromServer {\r\n  questionId: number;\r\n  title: string;\r\n  content: string;\r\n  userName: string;\r\n  created: string;\r\n  answers: Array<{\r\n    answerId: number;\r\n    content: string;\r\n    userName: string;\r\n    created: string;\r\n  }>;\r\n}\r\n\r\nexport interface AnswerData {\r\n  answerId: number;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\n\r\nexport interface PostAnswerData {\r\n  questionId: number;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\n\r\nexport interface PostQuestionData {\r\n  title: string;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\n\r\nexport interface PostAnswerData {\r\n  questionId: number;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\n\r\nexport const mapQuestionFromServer = (\r\n  question: QuestionDataFromServer,\r\n): QuestionData => ({\r\n  ...question,\r\n  created: new Date(question.created),\r\n  answers: question.answers\r\n    ? question.answers.map((answer) => ({\r\n        ...answer,\r\n        created: new Date(answer.created),\r\n      }))\r\n    : [],\r\n});\r\n\r\nexport const getUnansweredQuestions = async (): Promise<QuestionData[]> => {\r\n  const result = await http<QuestionDataFromServer[]>({\r\n    path: '/questions/unanswered',\r\n  });\r\n  if (result.ok && result.body) {\r\n    return result.body.map(mapQuestionFromServer);\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getQuestion = async (\r\n  questionId: number,\r\n): Promise<QuestionData | null> => {\r\n  const result = await http<QuestionDataFromServer>({\r\n    path: `/questions/${questionId}`,\r\n  });\r\n  if (result.ok && result.body) {\r\n    return mapQuestionFromServer(result.body);\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const searchQuestions = async (\r\n  criteria: string,\r\n): Promise<QuestionData[]> => {\r\n  const result = await http<QuestionDataFromServer[]>({\r\n    path: `/questions?search=${criteria}`,\r\n  });\r\n  if (result.ok && result.body) {\r\n    return result.body.map(mapQuestionFromServer);\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const postQuestion = async (\r\n  question: PostQuestionData,\r\n): Promise<QuestionData | undefined> => {\r\n  const accesToken = await getAccessToken();\r\n  const result = await http<QuestionDataFromServer, PostQuestionData>({\r\n    path: '/questions',\r\n    method: 'post',\r\n    body: question,\r\n    accesToken,\r\n  });\r\n  if (result.ok && result.body) {\r\n    return mapQuestionFromServer(result.body);\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const postAnswer = async (\r\n  answer: PostAnswerData,\r\n): Promise<AnswerData | undefined> => {\r\n  const accesToken = await getAccessToken();\r\n  const result = await http<AnswerData, PostAnswerData>({\r\n    path: '/questions/answer',\r\n    method: 'post',\r\n    body: answer,\r\n    accesToken,\r\n  });\r\n  if (result.ok) {\r\n    return result.body;\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}