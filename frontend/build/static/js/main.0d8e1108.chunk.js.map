{"version":3,"sources":["Auth.tsx","Page.tsx","http.ts","QuestionData.ts","AppSettings.ts","PageTitle.tsx","Styles.ts","user.svg","Icons.tsx","Header.tsx","Question.tsx","QuestionList.tsx","HomePage.tsx","SearchPage.tsx","SignInPage.tsx","SignOutPage.tsx","NotFoundPage.tsx","Answer.tsx","AnswerList.tsx","QuestionPage.tsx","AuthorizedPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Auth0Context","React","createContext","isAuthenticated","signIn","signOut","loading","useAuth","useContext","AuthProvider","children","useState","setIsAuthenticated","undefined","user","setUser","auth0Client","setAuth0Client","setLoading","useEffect","initAuth0","a","createAuth0Client","authSettings","auth0FromHook","window","location","pathname","search","indexOf","handleRedirectCallback","replace","origin","isAuthenticatedFromHook","getUser","getAuth0ClientFromState","Error","Provider","value","loginWithRedirect","logout","client_id","returnTo","getAccessToken","getTokenSilently","accessToken","Page","title","css","http","config","request","Request","webAPIUrl","path","method","headers","body","JSON","stringify","accesToken","set","fetch","response","ok","json","logError","contentType","get","text","console","error","url","mapQuestionFromServer","question","created","Date","answers","map","answer","getUnansweredQuestions","result","getQuestion","questionId","searchQuestions","criteria","postQuestion","postAnswer","server","process","REACT_APP_ENV","domain","redirect_uri","scope","audience","PageTitle","gray1","gray2","gray3","gray5","gray6","primary2","accent2","fontFamily","fontSize","baseFieldCss","PrimaryButton","styled","button","FieldSet","fieldset","FieldContainer","div","FieldLabel","label","FieldInput","input","FieldTextArea","textarea","FieldError","FormButtonContainer","SubmissionSuccess","StatusText","UserIcon","src","alt","buttonStyle","Header","navigate","useNavigate","useForm","register","handleSubmit","useSearchParams","to","onSubmit","defaultValue","type","placeholder","name","Question","data","showContent","content","length","substring","userName","toLocaleDateString","toLocaleTimeString","QuestionList","renderItem","HomePage","questions","setQuestions","questionsLoading","setQuestionsLoading","cancelled","doGetUnansweredQuestions","unansweredQuestions","log","onClick","SearchPage","searchParams","doSearch","foundResults","SignInPage","action","SignOutPage","message","NotFoundPage","Answer","AnswerList","answerId","QuestionPage","successfullySubmitted","setSuccessfullySubmitted","setQuestion","useParams","formState","errors","isSubmitting","doGetQuestion","foundQuestion","Number","submitForm","Fragment","disabled","htmlFor","required","minLength","id","AuthorizedPage","AskPage","lazy","App","Auth","element","Suspense","fallback","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d8e1108.chunk.js","sourcesContent":["import React from 'react';\r\nimport createAuth0Client, { Auth0Client } from '@auth0/auth0-spa-js';\r\nimport { authSettings } from './AppSettings';\r\n\r\ninterface Auth0User {\r\n  name?: string;\r\n  email?: string;\r\n}\r\ninterface IAuth0Context {\r\n  isAuthenticated: boolean;\r\n  user?: Auth0User;\r\n  signIn: () => void;\r\n  signOut: () => void;\r\n  loading: boolean;\r\n}\r\nexport const Auth0Context = React.createContext<IAuth0Context>({\r\n  isAuthenticated: false,\r\n  signIn: () => {},\r\n  signOut: () => {},\r\n  loading: true,\r\n});\r\n\r\nexport const useAuth = () => React.useContext(Auth0Context);\r\n\r\nexport const AuthProvider: React.FC = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = React.useState<boolean>(false);\r\n  const [user, setUser] = React.useState<Auth0User | undefined>(undefined);\r\n  const [auth0Client, setAuth0Client] = React.useState<Auth0Client>();\r\n  const [loading, setLoading] = React.useState<boolean>(true);\r\n\r\n  React.useEffect(() => {\r\n    const initAuth0 = async () => {\r\n      setLoading(true);\r\n      const auth0FromHook = await createAuth0Client(authSettings);\r\n      setAuth0Client(auth0FromHook);\r\n\r\n      if (\r\n        window.location.pathname === '/signin-callback' &&\r\n        window.location.search.indexOf('code=') > -1\r\n      ) {\r\n        await auth0FromHook.handleRedirectCallback();\r\n        window.location.replace(window.location.origin);\r\n      }\r\n\r\n      const isAuthenticatedFromHook = await auth0FromHook.isAuthenticated();\r\n      if (isAuthenticatedFromHook) {\r\n        const user = await auth0FromHook.getUser();\r\n        setUser(user);\r\n      }\r\n      setIsAuthenticated(isAuthenticatedFromHook);\r\n      setLoading(false);\r\n    };\r\n    initAuth0();\r\n  }, []);\r\n\r\n  const getAuth0ClientFromState = () => {\r\n    if (auth0Client === undefined) {\r\n      throw new Error('Auth0 client not set');\r\n    }\r\n    return auth0Client;\r\n  };\r\n\r\n  return (\r\n    <Auth0Context.Provider\r\n      value={{\r\n        isAuthenticated,\r\n        user,\r\n        signIn: () => getAuth0ClientFromState().loginWithRedirect(),\r\n        signOut: () =>\r\n          getAuth0ClientFromState().logout({\r\n            client_id: authSettings.client_id,\r\n            returnTo: window.location.origin + '/signout-callback',\r\n          }),\r\n        loading,\r\n      }}\r\n    >\r\n      {children}\r\n    </Auth0Context.Provider>\r\n  );\r\n};\r\n\r\nexport const getAccessToken = async () => {\r\n  const auth0FromHook = await createAuth0Client(authSettings);\r\n  const accessToken = await auth0FromHook.getTokenSilently();\r\n  return accessToken;\r\n};\r\n","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport { PageTitle } from './PageTitle';\r\n\r\ninterface Props {\r\n  title?: string;\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const Page = ({ title, children }: Props) => (\r\n  <div\r\n    css={css`\r\n      margin: 50px auto 20px auto;\r\n      padding: 30px 20px;\r\n      max-width: 600px;\r\n    `}\r\n  >\r\n    {title && <PageTitle>{title}</PageTitle>}\r\n    {children}\r\n  </div>\r\n);\r\n","import { isGetAccessor } from 'typescript';\r\nimport { webAPIUrl } from './AppSettings';\r\n\r\nexport interface HttpRequest<REQB> {\r\n  path: string;\r\n  method?: string;\r\n  body?: REQB;\r\n  accesToken?: string;\r\n}\r\n\r\nexport interface HttpResponse<RESB> {\r\n  ok: boolean;\r\n  body?: RESB;\r\n}\r\n\r\nexport const http = async <RESB, REQB = undefined>(\r\n  config: HttpRequest<REQB>,\r\n): Promise<HttpResponse<RESB>> => {\r\n  const request = new Request(`${webAPIUrl}${config.path}`, {\r\n    method: config.method || 'get',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: config.body ? JSON.stringify(config.body) : undefined,\r\n  });\r\n  if (config.accesToken) {\r\n    request.headers.set('authorization', `bearer ${config.accesToken}`);\r\n  }\r\n  const response = await fetch(request);\r\n  if (response.ok) {\r\n    const body = await response.json();\r\n    return { ok: response.ok, body };\r\n  } else {\r\n    logError(request, response);\r\n    return { ok: response.ok };\r\n  }\r\n};\r\n\r\nconst logError = async (request: Request, response: Response) => {\r\n  const contentType = response.headers.get('content-type');\r\n  let body: any;\r\n  if (contentType && contentType.indexOf('application/json') !== -1) {\r\n    body = await response.json();\r\n  } else {\r\n    body = await request.text();\r\n  }\r\n  console.error(`Error requesting ${request.method}${request.url}`, body);\r\n};\r\n","import { http } from './http';\r\nimport { getAccessToken } from './Auth';\r\n\r\nexport interface QuestionData {\r\n  questionId: number;\r\n  title: string;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n  answers: AnswerData[];\r\n}\r\n\r\nexport interface QuestionDataFromServer {\r\n  questionId: number;\r\n  title: string;\r\n  content: string;\r\n  userName: string;\r\n  created: string;\r\n  answers: Array<{\r\n    answerId: number;\r\n    content: string;\r\n    userName: string;\r\n    created: string;\r\n  }>;\r\n}\r\n\r\nexport interface AnswerData {\r\n  answerId: number;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\n\r\nexport interface PostAnswerData {\r\n  questionId: number;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\n\r\nexport interface PostQuestionData {\r\n  title: string;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\n\r\nexport interface PostAnswerData {\r\n  questionId: number;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\n\r\nexport const mapQuestionFromServer = (\r\n  question: QuestionDataFromServer,\r\n): QuestionData => ({\r\n  ...question,\r\n  created: new Date(question.created),\r\n  answers: question.answers\r\n    ? question.answers.map((answer) => ({\r\n        ...answer,\r\n        created: new Date(answer.created),\r\n      }))\r\n    : [],\r\n});\r\n\r\nexport const getUnansweredQuestions = async (): Promise<QuestionData[]> => {\r\n  const result = await http<QuestionDataFromServer[]>({\r\n    path: '/questions/unanswered',\r\n  });\r\n  if (result.ok && result.body) {\r\n    return result.body.map(mapQuestionFromServer);\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getQuestion = async (\r\n  questionId: number,\r\n): Promise<QuestionData | null> => {\r\n  const result = await http<QuestionDataFromServer>({\r\n    path: `/questions/${questionId}`,\r\n  });\r\n  if (result.ok && result.body) {\r\n    return mapQuestionFromServer(result.body);\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const searchQuestions = async (\r\n  criteria: string,\r\n): Promise<QuestionData[]> => {\r\n  const result = await http<QuestionDataFromServer[]>({\r\n    path: `/questions?search=${criteria}`,\r\n  });\r\n  if (result.ok && result.body) {\r\n    return result.body.map(mapQuestionFromServer);\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const postQuestion = async (\r\n  question: PostQuestionData,\r\n): Promise<QuestionData | undefined> => {\r\n  const accesToken = await getAccessToken();\r\n  const result = await http<QuestionDataFromServer, PostQuestionData>({\r\n    path: '/questions',\r\n    method: 'post',\r\n    body: question,\r\n    accesToken,\r\n  });\r\n  if (result.ok && result.body) {\r\n    return mapQuestionFromServer(result.body);\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const postAnswer = async (\r\n  answer: PostAnswerData,\r\n): Promise<AnswerData | undefined> => {\r\n  const accesToken = await getAccessToken();\r\n  const result = await http<AnswerData, PostAnswerData>({\r\n    path: '/questions/answer',\r\n    method: 'post',\r\n    body: answer,\r\n    accesToken,\r\n  });\r\n  if (result.ok) {\r\n    return result.body;\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n","export const server =\r\n  process.env.REACT_APP_ENV === 'production'\r\n    ? 'https://qanda2022be.azurewebsites.net'\r\n    : process.env.REACT_APP_ENV === 'staging'\r\n    ? 'https://qanda2022bestg.azurewebsites.net'\r\n    : 'https://localhost:44378';\r\n\r\nexport const webAPIUrl = `${server}/api`;\r\n\r\nexport const authSettings = {\r\n  domain: 'dev-gyr33wnb.us.auth0.com',\r\n  client_id: '6W7O74JLG8XFg7NTugeWH88EUsqXu9vS',\r\n  redirect_uri: window.location.origin + '/signin-callback',\r\n  scope: 'openid profile QandAAPI email',\r\n  audience: 'https://qanda',\r\n};\r\n","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport React from 'react';\r\n\r\ninterface Props {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const PageTitle = ({ children }: Props) => (\r\n  <h2\r\n    css={css`\r\n      font-size: 15px;\r\n      font-weight: bold;\r\n      margin: 10px 0px 5px;\r\n      text-align: center;\r\n      text-transform: uppercase;\r\n    `}\r\n  >\r\n    {children}\r\n  </h2>\r\n);\r\n","import styled from '@emotion/styled';\r\nimport { css } from '@emotion/react';\r\n\r\nexport const gray1 = '#383737';\r\nexport const gray2 = '#5c5a5a';\r\nexport const gray3 = '#857c81';\r\nexport const gray4 = '#b9b9b9';\r\nexport const gray5 = '#e3e2e2';\r\nexport const gray6 = '#f7f8fa';\r\n\r\nexport const primary1 = '#681c41';\r\nexport const primary2 = '#824c67';\r\n\r\nexport const accent1 = '#dbb365';\r\nexport const accent2 = '#efd197';\r\n\r\nexport const fontFamily = \"'Segoe UI', 'Helvetica Neue', sans-serif\";\r\nexport const fontSize = '16px';\r\n\r\nconst baseFieldCss = css`\r\n  box-sizing: border-box;\r\n  font-family: ${fontFamily};\r\n  font-size: ${fontSize};\r\n  margin-bottom: 5px;\r\n  padding: 8px 10px;\r\n  border: 1px solid ${gray5};\r\n  border-radius: 3px;\r\n  color: ${gray2};\r\n  background-color: white;\r\n  width: 100%;\r\n  :focus {\r\n    outline-color: ${gray5};\r\n  }\r\n  :disabled {\r\n    background-color: ${gray6};\r\n  }\r\n`;\r\n\r\nexport const PrimaryButton = styled.button`\r\n  background-color: ${primary2};\r\n  border-color: ${primary2};\r\n  border-style: solid;\r\n  border-radius: 5px;\r\n  font-family: ${fontFamily};\r\n  font-size: ${fontSize};\r\n  padding: 5px 10px;\r\n  color: white;\r\n  cursor: pointer;\r\n  :hover {\r\n    background-color: ${primary1};\r\n  }\r\n  :focus {\r\n    outline-color: ${primary2};\r\n  }\r\n  :disabled {\r\n    opacity: 0.5;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nexport const FieldSet = styled.fieldset`\r\n  margin: 10px auto 0 auto;\r\n  padding: 30px;\r\n  width: 350px;\r\n  background-color: ${gray6};\r\n  border-radius: 4px;\r\n  border: 1px solid ${gray5};\r\n  box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\r\n`;\r\n\r\nexport const FieldContainer = styled.div`\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nexport const FieldLabel = styled.label`\r\n  font-weight: bold;\r\n`;\r\n\r\nexport const FieldInput = styled.input`\r\n  ${baseFieldCss}\r\n`;\r\n\r\nexport const FieldTextArea = styled.textarea`\r\n  ${baseFieldCss} height:100px;\r\n`;\r\n\r\nexport const FieldError = styled.div`\r\n  font-size: 12px;\r\n  color: red;\r\n`;\r\n\r\nexport const FormButtonContainer = styled.div`\r\n  margin: 30px 0px 0px 0px;\r\n  padding: 20px 0px 0px 0px;\r\n  border-top: 1px solid ${gray5};\r\n`;\r\n\r\nexport const SubmissionSuccess = styled.div`\r\n  margin-top: 10px;\r\n  color: green;\r\n`;\r\n\r\nexport const SubmissionFailure = styled.div`\r\n  margin-top: 10px;\r\n  color: red;\r\n`;\r\n\r\nexport const StatusText = styled.div`\r\n  text-align: center;\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/user.36491d86.svg\";","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport user from './user.svg';\r\n\r\nexport const UserIcon = () => (\r\n  <img\r\n    src={user}\r\n    alt=\"User\"\r\n    css={css`\r\n      width: 12px;\r\n      opacity: 0.6;\r\n    `}\r\n  />\r\n);\r\n","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport { fontFamily, fontSize, gray1, gray2, gray5 } from './Styles';\r\nimport { UserIcon } from './Icons';\r\nimport { Link, useSearchParams, useNavigate } from 'react-router-dom';\r\nimport React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useAuth } from './Auth';\r\n\r\nconst buttonStyle = css`\r\n  font-family: ${fontFamily};\r\n  font-size: ${fontSize};\r\n  padding: 5px 10px;\r\n  background-color: transparent;\r\n  color: ${gray2};\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n  :focus {\r\n    outline-color: ${gray5};\r\n  }\r\n  span {\r\n    margin-left: 7px;\r\n  }\r\n`;\r\n\r\ntype FormData = { search: string };\r\n\r\nexport const Header = () => {\r\n  const navigate = useNavigate();\r\n  const { register, handleSubmit } = useForm<FormData>();\r\n  const [searchParams] = useSearchParams();\r\n  const criteria = searchParams.get('criteria') || '';\r\n  const submitForm = ({ search }: FormData) => {\r\n    navigate(`search?criteria=${search}`);\r\n  };\r\n  const { isAuthenticated, user, loading } = useAuth();\r\n\r\n  return (\r\n    <div\r\n      css={css`\r\n        position: fixed;\r\n        box-sizing: border-box;\r\n        top: 0;\r\n        width: 100%;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n        padding: 10px 20px;\r\n        background-color: #fff;\r\n        border-bottom: 1px solid ${gray5};\r\n        box-shadow: 0 3px 7px 0 rgba(110, 112, 114, 0.21);\r\n      `}\r\n    >\r\n      <Link\r\n        to=\"/\"\r\n        css={css`\r\n          font-size: 24px;\r\n          font-weight: bold;\r\n          color: ${gray1};\r\n          text-decoration: none;\r\n        `}\r\n      >\r\n        Q & A\r\n        <span\r\n          css={css`\r\n            margin-left: 5px;\r\n            font-size: 14px;\r\n            font-weight: normal;\r\n          `}\r\n        >\r\n          {process.env.REACT_APP_ENV || 'dev'}\r\n        </span>\r\n      </Link>\r\n\r\n      <form onSubmit={handleSubmit(submitForm)}>\r\n        <input\r\n          {...register('search')}\r\n          defaultValue={criteria}\r\n          type=\"text\"\r\n          placeholder=\"Search...\"\r\n          css={css`\r\n            box-sizing: border-box;\r\n            font-family: ${fontFamily};\r\n            font-size: ${fontSize};\r\n            padding: 8px 10px;\r\n            border: 1px solid ${gray5};\r\n            border-radius: 3px;\r\n            color: ${gray2};\r\n            background-color: white;\r\n            width: 200px;\r\n            height: 30px;\r\n            :focus {\r\n              outline-color: ${gray5};\r\n            }\r\n          `}\r\n        />\r\n      </form>\r\n      <div>\r\n        {!loading &&\r\n          (isAuthenticated ? (\r\n            <div>\r\n              <span>{user!.name}</span>\r\n              <Link to=\"signout\" css={buttonStyle}>\r\n                <UserIcon />\r\n                <span>Sign Out</span>\r\n              </Link>\r\n            </div>\r\n          ) : (\r\n            <Link to=\"signin\" css={buttonStyle}>\r\n              <UserIcon />\r\n              <span>Sign In</span>\r\n            </Link>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport { gray2, gray3 } from './Styles';\r\nimport { QuestionData } from './QuestionData';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface Props {\r\n  data: QuestionData;\r\n  showContent?: boolean;\r\n}\r\n\r\nexport const Question = ({ data, showContent = true }: Props) => (\r\n  <div\r\n    css={css`\r\n      padding: 10px 0px;\r\n      font-size: 19px;\r\n    `}\r\n  >\r\n    <Link\r\n      css={css`\r\n        text-decoration: none;\r\n        color: ${gray2};\r\n      `}\r\n      to={`/questions/${data.questionId}`}\r\n    >\r\n      {data.title}\r\n    </Link>\r\n\r\n    {showContent && (\r\n      <div\r\n        css={css`\r\n          padding-bottom: 10px;\r\n          font-size: 15px;\r\n          color: ${gray2};\r\n        `}\r\n      >\r\n        {data.content.length > 50\r\n          ? `${data.content.substring(0, 50)}...`\r\n          : data.content}\r\n      </div>\r\n    )}\r\n    <div\r\n      css={css`\r\n        font-size: 12px;\r\n        font-style: italic;\r\n        color: ${gray3};\r\n      `}\r\n    >\r\n      {`Asked by nenex ${data.userName} on\r\n            ${data.created.toLocaleDateString()} ${data.created.toLocaleTimeString()}`}\r\n    </div>\r\n  </div>\r\n);\r\n\r\n/* Question.defaultProps = {\r\n  showContent: true,\r\n}; */\r\n","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport { QuestionData } from './QuestionData';\r\nimport { Question } from './Question';\r\nimport { accent2, gray5 } from './Styles';\r\n\r\ninterface Props {\r\n  data: QuestionData[];\r\n  renderItem?: (item: QuestionData) => JSX.Element;\r\n}\r\n\r\nexport const QuestionList = ({ data, renderItem }: Props) => (\r\n  <ul\r\n    css={css`\r\n      list-style: none;\r\n      margin: 10px 0 0 0;\r\n      padding: 0px 20px;\r\n      background-color: #fff;\r\n      border-bottom-left-radius: 4px;\r\n      border-bottom-right-radius: 4px;\r\n      border-top: 3px solid ${accent2};\r\n      box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\r\n    `}\r\n  >\r\n    {data.map((question) => (\r\n      <li\r\n        key={question.questionId}\r\n        css={css`\r\n          border-top: 1px solid ${gray5};\r\n          ::first-of-type {\r\n            border-top: none;\r\n          }\r\n        `}\r\n      >\r\n        {renderItem ? renderItem(question) : <Question data={question} />}\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport React from 'react';\r\nimport { getUnansweredQuestions, QuestionData } from './QuestionData';\r\nimport { QuestionList } from './QuestionList';\r\nimport { Page } from './Page';\r\nimport { PageTitle } from './PageTitle';\r\nimport { PrimaryButton } from './Styles';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAuth } from './Auth';\r\n\r\nexport const HomePage = () => {\r\n  const [questions, setQuestions] = React.useState<QuestionData[]>([]);\r\n  const [questionsLoading, setQuestionsLoading] = React.useState(true);\r\n\r\n  React.useEffect(() => {\r\n    let cancelled = false;\r\n    const doGetUnansweredQuestions = async () => {\r\n      const unansweredQuestions = await getUnansweredQuestions();\r\n      if (!cancelled) {\r\n        setQuestions(unansweredQuestions);\r\n        setQuestionsLoading(false);\r\n      }\r\n    };\r\n    doGetUnansweredQuestions();\r\n    return () => {\r\n      cancelled = true;\r\n    };\r\n  }, []);\r\n\r\n  console.log('rendered');\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleAskQuestionClick = () => {\r\n    navigate('ask');\r\n  };\r\n\r\n  const { isAuthenticated } = useAuth();\r\n\r\n  return (\r\n    <Page>\r\n      <div\r\n        css={css`\r\n          display: flex;\r\n          align-items: center;\r\n          justify-content: space-between;\r\n        `}\r\n      >\r\n        <PageTitle>Unanswered Questions</PageTitle>\r\n        {isAuthenticated && (\r\n          <PrimaryButton onClick={handleAskQuestionClick}>\r\n            Ask a question\r\n          </PrimaryButton>\r\n        )}\r\n      </div>\r\n      {questionsLoading ? (\r\n        <div>Loading...</div>\r\n      ) : (\r\n        <QuestionList\r\n          data={questions || []}\r\n          //renderItem={(question) => <div>{question.title}</div>}\r\n        />\r\n      )}\r\n    </Page>\r\n  );\r\n};\r\n","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport { Page } from './Page';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { QuestionList } from './QuestionList';\r\nimport { QuestionData, searchQuestions } from './QuestionData';\r\nimport React from 'react';\r\n\r\nexport const SearchPage = () => {\r\n  const [searchParams] = useSearchParams();\r\n  const [questions, setQuestions] = React.useState<QuestionData[]>([]);\r\n  const search = searchParams.get('criteria') || '';\r\n\r\n  React.useEffect(() => {\r\n    let cancelled = false;\r\n    const doSearch = async (criteria: string) => {\r\n      const foundResults = await searchQuestions(criteria);\r\n      if (!cancelled) {\r\n        setQuestions(foundResults);\r\n      }\r\n    };\r\n    doSearch(search);\r\n    return () => {\r\n      cancelled = true;\r\n    };\r\n    //eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [search]);\r\n\r\n  return (\r\n    <Page title=\"Search results\">\r\n      {search && (\r\n        <p\r\n          css={css`\r\n            font-size: 16px;\r\n            font-style: italic;\r\n            margin-top: 0px;\r\n          `}\r\n        >\r\n          {' '}\r\n          for \"{search}\"\r\n        </p>\r\n      )}\r\n      <QuestionList data={questions}></QuestionList>\r\n    </Page>\r\n  );\r\n};\r\n","import { Page } from './Page';\r\nimport { StatusText } from './Styles';\r\nimport { useAuth } from './Auth';\r\n\r\ntype SigninAction = 'signin' | 'signin-callback';\r\n\r\ninterface Props {\r\n  action: SigninAction;\r\n}\r\n\r\nexport const SignInPage = ({ action }: Props) => {\r\n  const { signIn } = useAuth();\r\n  if (action === 'signin') {\r\n    signIn();\r\n  }\r\n  return (\r\n    <Page title=\"Sign In\">\r\n      <StatusText>Signing in ...</StatusText>\r\n    </Page>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Page } from './Page';\r\nimport { StatusText } from './Styles';\r\nimport { useAuth } from './Auth';\r\n\r\ntype SignoutAction = 'signout' | 'signout-callback';\r\n\r\ninterface Props {\r\n  action: SignoutAction;\r\n}\r\n\r\nexport const SignOutPage = ({ action }: Props) => {\r\n  let message = 'Signing out ...';\r\n\r\n  const { signOut } = useAuth();\r\n\r\n  switch (action) {\r\n    case 'signout':\r\n      signOut();\r\n      break;\r\n    case 'signout-callback':\r\n      message = 'You successfully signed out!';\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <Page title=\"Sign out\">\r\n      <StatusText>{message}</StatusText>\r\n    </Page>\r\n  );\r\n};\r\n","import { Page } from './Page';\r\n\r\nexport const NotFoundPage = () => <Page title=\"Page Not Found\">{null}</Page>;\r\n","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport React from 'react';\r\nimport { AnswerData } from './QuestionData';\r\nimport { gray3 } from './Styles';\r\n\r\ninterface Props {\r\n  data: AnswerData;\r\n}\r\n\r\nexport const Answer = ({ data }: Props) => (\r\n  <div\r\n    css={css`\r\n      padding: 10px 0px;\r\n    `}\r\n  >\r\n    <div\r\n      css={css`\r\n        padding: 10px 0px;\r\n        font-size: 13px;\r\n      `}\r\n    >\r\n      {data.content}\r\n    </div>\r\n    <div\r\n      css={css`\r\n        font-size: 12px;\r\n        font-style: italic;\r\n        color: ${gray3};\r\n      `}\r\n    >\r\n      {`Answered by Eva Nupi Wi Wi ${\r\n        data.userName\r\n      } on ${data.created.toLocaleDateString()} ${data.created.toLocaleTimeString()}`}\r\n    </div>\r\n  </div>\r\n);\r\n","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport React from 'react';\r\nimport { AnswerData } from './QuestionData';\r\nimport { Answer } from './Answer';\r\nimport { gray5 } from './Styles';\r\n\r\ninterface Props {\r\n  data: AnswerData[];\r\n}\r\n\r\nexport const AnswerList = ({ data }: Props) => (\r\n  <ul\r\n    css={css`\r\n      list-style: none;\r\n      margin: 10px 0 0 0;\r\n      padding: 0;\r\n    `}\r\n  >\r\n    {data.map((answer) => (\r\n      <li\r\n        css={css`\r\n          border-top: 1px solid ${gray5};\r\n        `}\r\n        key={answer.answerId}\r\n      >\r\n        <Answer data={answer} />\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport {\r\n  gray3,\r\n  gray6,\r\n  FieldSet,\r\n  FieldContainer,\r\n  FieldLabel,\r\n  FieldTextArea,\r\n  FormButtonContainer,\r\n  PrimaryButton,\r\n  FieldError,\r\n  SubmissionSuccess,\r\n} from './Styles';\r\nimport { Page } from './Page';\r\nimport { useParams } from 'react-router';\r\nimport { getQuestion, postAnswer, QuestionData } from './QuestionData';\r\nimport { AnswerList } from './AnswerList';\r\nimport React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useAuth } from './Auth';\r\n\r\ntype FormData = {\r\n  content: string;\r\n};\r\n\r\nexport const QuestionPage = () => {\r\n  const [successfullySubmitted, setSuccessfullySubmitted] =\r\n    React.useState(false);\r\n  const [question, setQuestion] = React.useState<QuestionData | null>(null);\r\n  const { questionId } = useParams();\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting },\r\n  } = useForm<FormData>();\r\n\r\n  React.useEffect(() => {\r\n    let cancelled = false;\r\n    const doGetQuestion = async (questionId: number) => {\r\n      const foundQuestion = await getQuestion(questionId);\r\n      if (!cancelled) {\r\n        setQuestion(foundQuestion);\r\n      }\r\n    };\r\n    if (questionId) {\r\n      doGetQuestion(Number(questionId));\r\n    }\r\n    return () => {\r\n      cancelled = true;\r\n    };\r\n    //eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [questionId]);\r\n\r\n  const submitForm = async (data: FormData) => {\r\n    const result = await postAnswer({\r\n      questionId: question!.questionId,\r\n      content: data.content,\r\n      userName: 'EvaX',\r\n      created: new Date(),\r\n    });\r\n    setSuccessfullySubmitted(result ? true : false);\r\n  };\r\n\r\n  const { isAuthenticated } = useAuth();\r\n\r\n  return (\r\n    <Page>\r\n      <div\r\n        css={css`\r\n          background-color: white;\r\n          padding: 15px 20px 20px 20px;\r\n          border-radius: 4px;\r\n          border: 1px solid ${gray6};\r\n          box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\r\n        `}\r\n      >\r\n        <div\r\n          css={css`\r\n            font-size: 19px;\r\n            font-weight: bold;\r\n            margin: 10px 0px 5px;\r\n          `}\r\n        >\r\n          {question === null ? '' : question.title}\r\n        </div>\r\n        {question !== null && (\r\n          <React.Fragment>\r\n            <p\r\n              css={css`\r\n                margin-top: 0px;\r\n                background-color: white;\r\n              `}\r\n            >\r\n              {question.content}\r\n            </p>\r\n            <div\r\n              css={css`\r\n                font-size: 12px;\r\n                font-style: italic;\r\n                color: ${gray3};\r\n              `}\r\n            >\r\n              {`Asked by NupiLerox ${question.userName} on\r\n  ${question.created.toLocaleDateString()} \r\n  ${question.created.toLocaleTimeString()}`}\r\n            </div>\r\n            <AnswerList data={question.answers} />\r\n            {isAuthenticated && (\r\n              <form\r\n                onSubmit={handleSubmit(submitForm)}\r\n                css={css`\r\n                  margin-top: 20px;\r\n                `}\r\n              >\r\n                <FieldSet disabled={isSubmitting || successfullySubmitted}>\r\n                  <FieldContainer>\r\n                    <FieldLabel htmlFor=\"content\">Your Answer</FieldLabel>\r\n                    <FieldTextArea\r\n                      {...register('content', {\r\n                        required: true,\r\n                        minLength: 50,\r\n                      })}\r\n                      id=\"content\"\r\n                    ></FieldTextArea>\r\n                    {errors.content && errors.content.type === 'required' && (\r\n                      <FieldError>You must enter the answer</FieldError>\r\n                    )}\r\n                  </FieldContainer>\r\n                  <FormButtonContainer>\r\n                    <PrimaryButton type=\"submit\">\r\n                      Submit your answer\r\n                    </PrimaryButton>\r\n                  </FormButtonContainer>\r\n                  {successfullySubmitted && (\r\n                    <SubmissionSuccess>\r\n                      Your answer was successfully submitted\r\n                    </SubmissionSuccess>\r\n                  )}\r\n                </FieldSet>\r\n              </form>\r\n            )}\r\n          </React.Fragment>\r\n        )}\r\n      </div>\r\n    </Page>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Page } from './Page';\r\nimport { useAuth } from './Auth';\r\n\r\nexport const AuthorizedPage: React.FC = ({ children }) => {\r\n  const { isAuthenticated } = useAuth();\r\n  if (isAuthenticated) {\r\n    return <>{children}</>;\r\n  } else {\r\n    return <Page title=\"You do not have access to this page\">{null}</Page>;\r\n  }\r\n};\r\n","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\r\nimport { fontFamily, fontSize, gray2 } from './Styles';\r\nimport { Header } from './Header';\r\nimport { HomePage } from './HomePage';\r\n\r\nimport { SearchPage } from './SearchPage';\r\nimport { SignInPage } from './SignInPage';\r\nimport { SignOutPage } from './SignOutPage';\r\nimport { NotFoundPage } from './NotFoundPage';\r\nimport { QuestionPage } from './QuestionPage';\r\nimport React from 'react';\r\nimport { AuthProvider } from './Auth';\r\nimport { AuthorizedPage } from './AuthorizedPage';\r\n\r\nconst AskPage = React.lazy(() => import('./AskPage'));\r\n\r\nfunction App() {\r\n  return (\r\n    <AuthProvider>\r\n      <BrowserRouter>\r\n        <div\r\n          css={css`\r\n            font-family: ${fontFamily};\r\n            font-size: ${fontSize};\r\n            color: ${gray2};\r\n          `}\r\n        >\r\n          <Header />\r\n          <Routes>\r\n            <Route path=\"\" element={<HomePage />} />\r\n            <Route path=\"search\" element={<SearchPage />} />\r\n            <Route\r\n              path=\"ask\"\r\n              element={\r\n                <React.Suspense\r\n                  fallback={\r\n                    <div\r\n                      css={css`\r\n                        margin-top: 100px;\r\n                        text-align: center;\r\n                      `}\r\n                    >\r\n                      Loading...\r\n                    </div>\r\n                  }\r\n                >\r\n                  <AuthorizedPage>\r\n                    <AskPage />\r\n                  </AuthorizedPage>\r\n                </React.Suspense>\r\n              }\r\n            />\r\n            <Route path=\"signin\" element={<SignInPage action=\"signin\" />} />\r\n            <Route\r\n              path=\"/signin-callback\"\r\n              element={<SignInPage action=\"signin-callback\" />}\r\n            />\r\n            |||\r\n            <Route path=\"signout\" element={<SignOutPage action=\"signout\" />} />\r\n            <Route\r\n              path=\"/signout-callback\"\r\n              element={<SignOutPage action=\"signout-callback\" />}\r\n            />\r\n            <Route path=\"questions/:questionId\" element={<QuestionPage />} />\r\n            <Route path=\"*\" element={<NotFoundPage />} />\r\n          </Routes>\r\n        </div>\r\n      </BrowserRouter>\r\n    </AuthProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}